== RFC 007: Community Notification Tags ==
We should implement a set of tags that users can post on any pathway, notifying the authors 
and the community about incomplete data or the status of the work.  These are analogous to 
the tags used in Wikipedia for the same purpose. Some of these could be very brief, others
could contain multiple sentences.

We should also implement bots to manage some of the tags to automatically notify users of
highlighted content, whether it might be 'new' or 'incomplete' or 'scheduled for deletion'.

== How Wikipedia Does It ==
http://en.wikipedia.org/wiki/Wikipedia:Template_messages/User_talk_namespace

Wikipedia uses templates to define the contents of tags for a broad range of purposes. The
templates are then simply referenced in any page by adding {{template_name}} to the text. Bots
handle a significant portion of the template usage. Note that templates are referenced "in real time" 
as each page is rendered, this is called transclusion. This can put a strain on the server. Wikipedia 
recommends using substitution to remedy this. Substitution simply replaces the template reference 
with the contents of the template into the target. Substitution can be implemented by simply
preceding the the template name with 'subst:', e.g., {{subst:template_name}}.  When using substitution,
you'll notice the contents of the template copied into the page when editing that page. This
also effectively disconnects the template reference from the template. So, when the template is changed
the change is NOT reflected in the target page. This is OK for simple or temporary tags, but not for
templates like the ones that generate the header and footer of every Pathway Page, i.e., we want changes
to those to be reflected in the target pages.

Comment Martijn:
I wouldn't worry too much about the server load here. It's probably a rather small optimization
that comes at a cost of flexibility. I think we have much lower hanging fruit to pick in terms of
optimization.

== Implementation ==
1. Since our pathway pages are rendered from GPML and Pathway Page Templates, we will have to add
   an applet to the Top page template to handle the template tags, so that they are added to the
   rendered page without being in the GPML.
2. Create three pages for template-based tag listings:
   a. User tags: tags we want users to use
   b. Admin tags: tags for admins to use
   c. Bot tags: tags for bots to use
   Note that there is overlapping usage across these categories such that Admins can use User tags, and
   Bots can use Admin and User tags; the categories help to distinguish which tags cannot be used by Users
   (e.g., Admin and Bot tags) and which should be automatic only (Bot tags).
3. Create template-based tags and reference them (via transclusion) in the appropriate list pages
4. Create bots to use bot tags
5. Use Admin tags
6. Introduce user tags via Help pages

== Tag Brainstorm ==
==== User Tags ====
 * In Progress, contact author ___
 * Hypothetical, not backed by published findings
 * Inappropriate edit (potential vandalism)
 * Inappropriate edit (potentially false)
 * Incomplete information (lit ref missing)
 * Incomplete information (left blank)
 * missing gene / protein database references
 * missing metabolite database refereces
 * missing literature references
 * no interactions defined (i.e. no sticky edges)
 
==== Admin Tags ====
 * Community Approved (Comment Martijn: Is it possible to attach tags to specific revisions? 
 						That would be really cool here. Especially if you can easily find the 
 						latest verison of a Pathway that has been Approved.)
 * Scheduled for deletion... by date... contact admin
 * Featured pathway (addded to feature page list)
 
 Tagging User Pages:
 * Curator
 * Admin
 * User with particular rights/responsibilities
 * Specific user group (Comment Kristina: For Portals, maybe there could be a way to assign all
 						new users registered through a certain portal as being part of that community.
 						For example if somebody creates an account under the Plant portal, the users
 						would automatically be tagged as being part of the plant community. If there isn't
 						a way to do this automatically, users could choose from a drop-down list of 
 						appropriate tags during registration).
 
==== Bot Tags =====
This information comes directly from the current database or from scripted queries on
GPML content. So, while some of the ideas below can be done now with a simple SQL
query, the idea is that the bot would run the query and manage the tag on the pathway page

 * New Pathway
 * Recently edited... date (from database)
 * Not updated in over a year... last edit date (from database)

 Tagging User Pages:
 * Active User (e.g., based on activity over past 7 days)
 * Inactive User (e.g., not logged in for over 6 months)
 * New User (e.g., first 7 days)
 * Valued Contributor (e.g., X number of edits)
 * Pathway Powerhouse (e.g., X number of new pathways)
 
== Additional Planning Ideas ==
Some notes and ideas for the implementation:

Martijn and I had a discussion about tags yesterday. We agreed that
there needs to be a distinction between tags/attributes that should be
stored in GPML and those that should be stored separately. 

Here's a proposal:
- Ontology: in GPML
- Portal categories: not in GPML
- Free tags: not in GPML
- Curator tags: not in GPML

One reason I don't want to store the last three tags in GPML because of
efficiency. Tagging a pathway should be really quick and effortless,
using an AJAX user interface (so no java applet or refresh of the
pathway page, see citeulike and google reader for a good example). This
is not possible when using GPML, because it needs a lot of processing
(validation etc) and the whole GPML code should be updated in the
database. The only disadvantage of not storing it in GPML could be that
tagging events don't show up in the revision history, any tagging
revision history should be implemented by ourselves. But that's a good
point too, because I don't think tagging should be in there (it's
technically not a change in the pathway). Another reason for not storing
it in GPML is efficiency of queries. E.g. if you query all pathways with
a given tag, you would need to fetch all GPML (for every pathway) and
parse it one by one. You basically have to process the whole database to
find something.

The reason that I think we should store the ontology information in GPML
is that this information is intrinsic to the pathway (like the pathway
name and gene annotation). It can also be very useful information for
offline applications of the pathway. And storing ontology annotation
doesn't have to be as efficient as tagging, since it's less dynamic.

I think we can cover the portal, free and curator tags with the same
implementation. For example, portal categories could be tags of the form
portal:portalname, approvement tags could be of the form
approved:username. This is similar to the for:user tag in del.icio.us,
which works great. The tagging mechanism is basically free. For the
curator tags that require permissions, the username is checked
afterwards to determine if it should be taken into account or not.
	
Concerning the implementation, I think a single table should be enough:

Tag	
*	name		//tag name
*	pathway	//pathway id
*	addedby	//the user who added the tag 
	dateadded	//the date the tag was added


For the user interface, we'll have to look into how to do asynchronous
updates to the MW database (so without refreshing). I've seen some AJAX
related code in the MW implementation, we should look into this. It will
also be good to implement the stable pathway identifiers (RFC 2),
otherwise we will need to update the complete tag pathway when renaming
a pathway.

