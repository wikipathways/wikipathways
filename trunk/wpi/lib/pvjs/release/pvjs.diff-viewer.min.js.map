{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/diff-viewer/diff-viewer.js"],"names":[],"mappings":"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","file":"pvjs.diff-viewer.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var fs = require('fs');\nvar insertCss = require('insert-css');\nvar css = Buffer(\"LnB2anMtZGlmZnZpZXdlciB7CiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDsKICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdzsKICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7CiAgICAtd2Via2l0LWZsZXgtd3JhcDogbm93cmFwOwogICAgLW1zLWZsZXgtd3JhcDogbm93cmFwOwogICAgZmxleC13cmFwOiBub3dyYXA7CiAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgLW1zLWZsZXgtcGFjazogY2VudGVyOwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAtd2Via2l0LWFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgIC1tcy1mbGV4LWxpbmUtcGFjazogY2VudGVyOwogICAgYWxpZ24tY29udGVudDogY2VudGVyOwogICAgLXdlYmtpdC1hbGlnbi1pdGVtczogc3RyZXRjaDsKICAgIC1tcy1mbGV4LWFsaWduOiBzdHJldGNoOwogICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7CiAgICBtaW4taGVpZ2h0OiA1MDBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7CiAgICB9CgoucHZqcy1kaWZmdmlld2VyIC5wYW5lIHsKICBoZWlnaHQ6IGluaGVyaXQ7CiAgd2lkdGg6IGluaGVyaXQ7CiAgLyoKICBmbG9hdDogbGVmdDsKICBvdmVyZmxvdzogaGlkZGVuOwogIHdpZHRoOiA1MCU7CiAgKi8KfQoKLnB2anMtZGlmZnZpZXdlciAucGFuZS1pbm5lciB7CiAgaGVpZ2h0OiBpbmhlcml0OwogIHdpZHRoOiBpbmhlcml0Owp9CgoucHZqcy1kaWZmdmlld2VyIC5wYW5lLnBhbmUtbGVmdCB7CiAgICAtd2Via2l0LW9yZGVyOiAtMTsKICAgIC1tcy1mbGV4LW9yZGVyOiAtMTsKICAgIG9yZGVyOiAtMTsKICAgIC13ZWJraXQtZmxleDogMCAxIGF1dG87CiAgICAtbXMtZmxleDogMCAxIGF1dG87CiAgICBmbGV4OiAxIDEgYXV0bzsKICAgIC13ZWJraXQtYWxpZ24tc2VsZjogYXV0bzsKICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG87CiAgICBhbGlnbi1zZWxmOiBhdXRvOwogICAgfQoKLnB2anMtZGlmZnZpZXdlciAucGFuZS5wYW5lLWNlbnRlciB7CiAgICAtd2Via2l0LW9yZGVyOiAwOwogICAgLW1zLWZsZXgtb3JkZXI6IDA7CiAgICBvcmRlcjogMDsKICAgIC13ZWJraXQtZmxleDogMCAxIGF1dG87CiAgICAtbXMtZmxleDogMCAxIGF1dG87CiAgICBmbGV4OiAwIDEgYXV0bzsKICAgIC13ZWJraXQtYWxpZ24tc2VsZjogYXV0bzsKICAgIC1tcy1mbGV4LWl0ZW0tYWxpZ246IGF1dG87CiAgICBhbGlnbi1zZWxmOiBhdXRvOwogICAgfQoKLnB2anMtZGlmZnZpZXdlciAucGFuZS5wYW5lLXJpZ2h0IHsKICAgIC13ZWJraXQtb3JkZXI6IDE7CiAgICAtbXMtZmxleC1vcmRlcjogMTsKICAgIG9yZGVyOiAxOwogICAgLXdlYmtpdC1mbGV4OiAwIDEgYXV0bzsKICAgIC1tcy1mbGV4OiAwIDEgYXV0bzsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgLXdlYmtpdC1hbGlnbi1zZWxmOiBhdXRvOwogICAgLW1zLWZsZXgtaXRlbS1hbGlnbjogYXV0bzsKICAgIGFsaWduLXNlbGY6IGF1dG87CiAgICB9CgouZGlhZ3JhbS1jb250YWluZXIgewogIC8qIGEga2x1ZGdlIHRvIGFkZHJlc3MgdGhlIHByb2JsZW0gd2hlcmUgdGhlIGhlaWdodCBpcyB0b28gc21hbGwgKi8KICBtaW4taGVpZ2h0OiA1MDBweDsKICB9CgovKioqKioqKioqKioqKioKICBPdmVybGF5CiAqKioqKioqKioqKioqKi8KCi5wdmpzLWRpZmZ2aWV3ZXIgPiAub3ZlcmxheSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMDsKICBsZWZ0OiAwOwogIGJvdHRvbTogMDsKICByaWdodDogMDsKICBiYWNrZ3JvdW5kOiAjZmZmOwp9CgoucHZqcy1kaWZmdmlld2VyID4gLm92ZXJsYXkgLmFsZXJ0ewogIHBhZGRpbmc6IDlweCAxNXB4OwogIG1hcmdpbjogNHB4OwogIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50OwogIGJvcmRlci1yYWRpdXM6IDRweDsKfQoKLnB2anMtZGlmZnZpZXdlciA+IC5vdmVybGF5IC5hbGVydC5hbGVydC1zdWNjZXNzewogIGJhY2tncm91bmQtY29sb3I6ICNkZmYwZDg7CiAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2OwogIGNvbG9yOiAjM2M3NjNkOwp9CgoucHZqcy1kaWZmdmlld2VyID4gLm92ZXJsYXkgLmFsZXJ0LmFsZXJ0LWluZm97CiAgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZWRmNzsKICBib3JkZXItY29sb3I6ICNiY2U4ZjE7CiAgY29sb3I6ICMzMTcwOGY7Cn0KCi5wdmpzLWRpZmZ2aWV3ZXIgPiAub3ZlcmxheSAuYWxlcnQuYWxlcnQtd2FybmluZ3sKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzOwogIGJvcmRlci1jb2xvcjogI2ZhZWJjYzsKICBjb2xvcjogIzhhNmQzYjsKfQoKLnB2anMtZGlmZnZpZXdlciA+IC5vdmVybGF5IC5hbGVydC5hbGVydC1kYW5nZXJ7CiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZGVkZTsKICBib3JkZXItY29sb3I6ICNlYmNjZDE7CiAgY29sb3I6ICNhOTQ0NDI7Cn0KCi8qKioqKioqKioqKioqKgogIENoYW5nZXMgTWFpbgogKioqKioqKioqKioqKiovCgouY2hhbmdlcyB7CiAgbWFyZ2luOiAwIDEycHg7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMwMDA7CgogIGZvbnQtZmFtaWx5OiBBcmlhbCwgIkhlbHZldGljYSBOZXVlIiwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOwogIGZvbnQtc2l6ZTogMTNweDsKfQoKLmNoYW5nZXMtY29udGFpbmVyIHsKfQoKLyoqKioqKioqKioqKioqCiAgQ2hhbmdlcyBUaXRsZXMKICoqKioqKioqKioqKioqLwoKLmNoYW5nZXMtdGl0bGUgewogIHBhZGRpbmc6IDVweCA0cHggM3B4OwogIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7CiAgYm9yZGVyLWJvdHRvbTogMHB4OwoKICBmb250LXNpemU6IDE2cHg7Cn0KCi5jaGFuZ2VzLXRpdGxlIGl7CiAgZm9udC1zaXplOiA5MCU7CiAgb3BhY2l0eTogMC44OwogIGZvbnQtc3R5bGU6IG5vcm1hbDsKfQoKLmNoYW5nZXMtdGl0bGUgaS5pY29uewogIGZvbnQtc2l6ZTogOTAlOwogIG9wYWNpdHk6IDAuODsKICBmb250LXN0eWxlOiBub3JtYWw7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQoKLmNoYW5nZXMtcGFyZW50IHNwYW4gewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgcGFkZGluZzogMCAwIDAgMTNweDsKfQoKLmNoYW5nZXMtcGFyZW50IHNwYW46YmVmb3JlIHsKICBjb250ZW50OiAnJzsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogM3B4OwogIHdpZHRoOiAwOwogIGhlaWdodDogMDsKICBtYXJnaW46IC02cHggMCAwOwogIGJvcmRlci13aWR0aDogNXB4IDAgNXB4IDZweDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICMwMDA7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKfQoKLm9wZW4gPiAuY2hhbmdlcy1wYXJlbnQgc3BhbjpiZWZvcmUgewogIGxlZnQ6IDA7CiAgbWFyZ2luLXRvcDogLTRweDsKICBib3JkZXItd2lkdGg6IDZweCA1cHggMCA1cHg7CiAgYm9yZGVyLWNvbG9yOiAjMDAwIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50Owp9CgovKiBOZXN0aW5nICovCi5jaGFuZ2VzLWNvbnRhaW5lciAuY2hhbmdlcy1jb250YWluZXIgLmNoYW5nZXMtdGl0bGUgewogIGZvbnQtc2l6ZTogMTRweDsKfQouY2hhbmdlcy1jb250YWluZXIgLmNoYW5nZXMtY29udGFpbmVyIC5jaGFuZ2VzLWNvbnRhaW5lciAuY2hhbmdlcy10aXRsZSB7CiAgcGFkZGluZy1sZWZ0OiAxMHB4OwogIGZvbnQtc2l6ZTogMTJweDsKfQoKLmNoYW5nZXMtY29udGFpbmVyLmFjdGl2ZSA+IC5jaGFuZ2VzLXRpdGxlIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmNoYW5nZXMtY29udGFpbmVyLmFjdGl2ZSA+IC5jaGFuZ2VzLXRpdGxlOmJlZm9yZSwKLmNoYW5nZXMtY29udGFpbmVyLmFjdGl2ZSA+IC5jaGFuZ2VzLXRpdGxlOmFmdGVyIHsKICBjb250ZW50OiAnJzsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDUwJTsKICBtYXJnaW46IC0xMnB4IDAgMDsKICB3aWR0aDogMDsKICBoZWlnaHQ6IDA7CiAgYm9yZGVyLXRvcDogMTJweCBzb2xpZCB0cmFuc3BhcmVudDsKICBib3JkZXItYm90dG9tOiAxMnB4IHNvbGlkIHRyYW5zcGFyZW50Owp9CgouY2hhbmdlcy1jb250YWluZXIuYWN0aXZlLmZvY3VzID4gLmNoYW5nZXMtdGl0bGV7CiAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgMTBweCAwcHggcmdiYSgwLCAwLCAwLCAwLjM1KTsKICAgICAtbW96LWJveC1zaGFkb3c6IGluc2V0IDAgMCAxMHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMzUpOwogICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDEwcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4zNSk7Cn0KCi5jaGFuZ2VzLWNvbnRhaW5lci5hY3RpdmUgPiAuY2hhbmdlcy10aXRsZTpiZWZvcmUgewogIGxlZnQ6IC0xMnB4OwogIGJvcmRlci1yaWdodDogMTJweCBzb2xpZCAjMDAwOwp9CgouY2hhbmdlcy1jb250YWluZXIuYWN0aXZlID4gLmNoYW5nZXMtdGl0bGU6YWZ0ZXIgewogIHJpZ2h0OiAtMTJweDsKICBib3JkZXItbGVmdDogMTJweCBzb2xpZCAjMDAwOwp9CgouY2hhbmdlcy10aXRsZS5jaGFuZ2UtYWRkZWQgewogIGJhY2tncm91bmQ6ICNhNmMwZTE7Cn0KLmNoYW5nZXMtY29udGFpbmVyLmFjdGl2ZSA+IC5jaGFuZ2VzLXRpdGxlLmNoYW5nZS1hZGRlZCB7CiAgYmFja2dyb3VuZDogIzZjOTFjYzsKfQouY2hhbmdlcy1jb250YWluZXIuYWN0aXZlID4gLmNoYW5nZXMtdGl0bGUuY2hhbmdlLWFkZGVkOmFmdGVyIHsKICBkaXNwbGF5OiBibG9jazsKfQoKLmNoYW5nZXMtdGl0bGUuY2hhbmdlLXVwZGF0ZWQgewogIGJhY2tncm91bmQ6ICNmZWZjOTY7Cn0KLmNoYW5nZXMtY29udGFpbmVyLmFjdGl2ZSA+IC5jaGFuZ2VzLXRpdGxlLmNoYW5nZS11cGRhdGVkIHsKICBiYWNrZ3JvdW5kOiAjZmZmOTQ0Owp9Ci5jaGFuZ2VzLWNvbnRhaW5lci5hY3RpdmUgPiAuY2hhbmdlcy10aXRsZS5jaGFuZ2UtdXBkYXRlZDpiZWZvcmUsCi5jaGFuZ2VzLWNvbnRhaW5lci5hY3RpdmUgPiAuY2hhbmdlcy10aXRsZS5jaGFuZ2UtdXBkYXRlZDphZnRlciB7CiAgZGlzcGxheTogYmxvY2s7Cn0KCi5jaGFuZ2VzLXRpdGxlLmNoYW5nZS1yZW1vdmVkIHsKICBiYWNrZ3JvdW5kOiAjZjlhNGFmOwp9Ci5jaGFuZ2VzLWNvbnRhaW5lci5hY3RpdmUgPiAuY2hhbmdlcy10aXRsZS5jaGFuZ2UtcmVtb3ZlZCB7CiAgYmFja2dyb3VuZDogI2YzNmI3ODsKfQouY2hhbmdlcy1jb250YWluZXIuYWN0aXZlID4gLmNoYW5nZXMtdGl0bGUuY2hhbmdlLXJlbW92ZWQ6YmVmb3JlIHsKICBkaXNwbGF5OiBibG9jazsKfQoKLmNoYW5nZXMtdGl0bGUuYWN0aXZlIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmNoYW5nZXMtdGl0bGUuYWN0aXZlOmJlZm9yZSB7CiAgY29udGVudDogJyc7CiAgcG9zaXRpb246IGFic29sdXRlOwp9CgoKLyoqKioqKioqKioqKioqCiAgQ2hhbmdlcyBMaXN0CiAqKioqKioqKioqKioqKi8KLmNoYW5nZXMtbGlzdCB7CiAgZGlzcGxheTogbm9uZTsKfQoKLmNoYW5nZXMuY2hhbmdlcy1saXN0IHsKICBkaXNwbGF5OiBibG9jazsKfQoKLmNoYW5nZXMtY29udGFpbmVyLm9wZW4gPiAuY2hhbmdlcy1saXN0IHsKICBkaXNwbGF5OiBibG9jazsKfQoKLyoqKioqKioqKioqKioqCiAgQ2hhbmdlcyBMaXN0CiAqKioqKioqKioqKioqKi8KLyouY2hhbmdlcy10aXRsZS5hY3RpdmUqLwouY2hhbmdlcy10aXRsZSA+IC5lbGVtZW50LWNoYW5nZXMgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi5hY3RpdmUgPiAuY2hhbmdlcy10aXRsZSA+IC5lbGVtZW50LWNoYW5nZXMgewogIGRpc3BsYXk6IGJsb2NrOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiA0cHggMCA0cHg7CiAgbGluZS1oZWlnaHQ6IDEuNDsKICBsaXN0LXN0eWxlOiBub25lOwogIHdvcmQtd3JhcDogYnJlYWstd29yZDsKfQo=\",\"base64\");\n\n(function(window, $) {\n  insertCss(css);\n\n  var pvjsOptionsDefault = {\n    sourceData: []\n  };\n  var instancesMap = {};\n\n  /**\n   * Init plugin\n   * @param {pvjs instance} pvjs\n   * @param {objects} pvjsOptions\n   */\n  function init(pvjs, pvjsOptions) {\n    instancesMap[pvjs.instanceId] = new PvjsDiffViewer(pvjs, pvjsOptions);\n    // Create new instance if it does not exist\n    if (!instancesMap.hasOwnProperty(pvjs.instanceId)) {\n      //var pvjsOptions2 = Object.create(pvjsOptions);\n      instancesMap[pvjs.instanceId] = new PvjsDiffViewer(pvjs, pvjsOptions);\n    }\n  }\n\n  /**\n   * Constructor\n   * @param {Object} pvjs\n   */\n  var PvjsDiffViewer = function(selector, pvjsOptionsSet) {\n    this.$pvjsElement = $(selector);\n\n    this.initContainer();\n\n    this.pvjsOptions = $.extend({}, pvjsOptionsDefault, pvjsOptionsSet[0]);\n    this.pvjs = new window.Pvjs(this.$paneLeft[0], this.pvjsOptions).getPublicInstance();\n\n    this.pvjsOptions2 = $.extend({}, pvjsOptionsDefault, pvjsOptionsSet[1]);\n    this.pvjs2 = new window.Pvjs(this.$paneRight[0], this.pvjsOptions2).getPublicInstance();\n\n    /*\n    this.pvjsOptions = $.extend({}, pvjsOptionsDefault, pvjsOptions);\n\n    //this.pvjs = new window.Pvjs();\n    this.pvjs = pvjs;\n    //*/\n\n    //this.initSecondPvjs();\n    this.hookEvents();\n\n    // Trigger pvjs2 render when everything is ready\n    this.pvjs.render();\n    this.pvjs2.render();\n  };\n\n  /**\n   * Create differences container\n   */\n  PvjsDiffViewer.prototype.initContainer = function() {\n    this.$diffviewer = $('<div class=\"pvjs-diffviewer\"/>');\n\n    // Create panes\n    this.$paneLeft = $('<div class=\"pane pane-left\"></div>')\n      .appendTo(this.$diffviewer);\n    this.$paneRight = $('<div class=\"pane pane-right\"></div>')\n      .appendTo(this.$diffviewer);\n    this.$paneCenter = $('<div class=\"pane pane-center\"></div>').appendTo(this.$diffviewer);\n\n    // Insert diffviewer container before pvjs element\n    this.$diffviewer.insertBefore(this.$pvjsElement);\n\n    // Move instance element into left pane\n    this.$paneLeft.append(this.$pvjsElement);\n  };\n\n  /**\n   * Initialize second pvjs. Save its instance into this.pvjs2\n   */\n  PvjsDiffViewer.prototype.initSecondPvjs = function() {\n    // Create second instance container\n    this.$pvjsElement2 = $('<div/>').appendTo(this.$paneRight);\n\n    // Get original pvjsOptions\n    var pvjsOptions = this.pvjs.getOptions();\n    // Set new source data\n    pvjsOptions.sourceData = this.pvjsOptions.sourceData;\n    pvjsOptions.manualRender = true;\n\n    // Create second pvjs instance\n    //this.pvjs2 = new window.Pvjs(this.$pvjsElement2[0], pvjsOptions);\n    //this.pvjs2 = this.pvjs(this.$pvjsElement2[0], pvjsOptions);\n    this.$pvjsElement2.pvjs(pvjsOptions);\n    this.pvjs2 = this.$pvjsElement2.pvjs('get').pop();\n  };\n\n  /**\n   * Hook render events. Display diffViewer only when both pvjss are ready\n   * Hook for error events so to know when to display a message instead of diffViewer\n   * Hook zoom and pan events in order to keep both pathways synchronized\n   * Hook main pvjs destroy event in order to know when to destroy second pathway\n   */\n  PvjsDiffViewer.prototype.hookEvents = function() {\n    var that = this;\n    var pvjsRendered = false;\n    var pvjs2Rendered = false;\n    var noDiff = false;\n\n    // pvjs renderer barrier\n    this.pvjs.on('rendered', function() {\n      pvjsRendered = true;\n      if (pvjs2Rendered && !noDiff) {\n        that.onPvjsesRendered();\n      }\n    });\n    this.pvjs2.on('rendered', function() {\n      pvjs2Rendered = true;\n      if (pvjsRendered && !noDiff) {\n        that.onPvjsesRendered();\n      }\n    });\n\n    this.pvjs.on('error.sourceData', function() {\n      if (!noDiff) {\n        that.onNoDiff('One or both pathways were not rendered. ' +\n            'Most probably one pathways uses old format that is not supported by pvjs.');\n      }\n\n      noDiff = true;\n    });\n    this.pvjs2.on('error.sourceData', function() {\n      if (!noDiff) {\n        that.onNoDiff('One or both pathways were not rendered.' +\n            'Most probably one pathways uses old format that is not supported by pvjs.');\n      }\n\n      noDiff = true;\n    });\n\n    // On destroy pvjs\n    this.pvjs.on('destroy.pvjs', function() {\n      that.pvjs2.destroy();\n      // Put back pvjs element container\n      that.$pvjsElement.insertBefore(that.$diffviewer);\n      that.$diffviewer.remove();\n    });\n\n    // Pan and zoom events\n    var pvjsPanned = false;\n    var pvjsZoomed = false;\n    var pvjs2Panned = false;\n    var pvjs2Zoomed = false;\n\n    this.pvjs.on('zoomed.renderer', function(level) {\n      if (pvjs2Zoomed) { // prevent recursive call\n        // TODO remove this kludge. I don't know why this\n        // seems to get triggered multiple times, yielding\n        // pvjs2Zoomed true the first time but false the second,\n        // resulting in a race condition between the two pvjs's.\n        window.setTimeout(function() {\n          pvjs2Zoomed = false;\n        }, 0);\n        return;\n      }\n      pvjsZoomed = true;\n\n      that.pvjs2.zoom(level / that.zoomScale);\n      that.pvjs.panBy({x: 0, y: 0}); // trigger pan to sync pathways\n      that.pvjs2.pan(that.pvjs.getPan());\n    });\n\n    this.pvjs.on('panned.renderer', function(point) {\n      if (pvjs2Panned) {\n        // TODO see note for pvjs2Zoomed above\n        window.setTimeout(function() {\n          pvjs2Panned = false;\n        }, 0);\n        return;\n      }\n      pvjsPanned = true;\n      that.pvjs2.pan(point);\n    });\n\n    this.pvjs2.on('zoomed.renderer', function(level) {\n      if (pvjsZoomed) {\n        // TODO see note for pvjs2Zoomed above\n        window.setTimeout(function() {\n          pvjsZoomed = false;\n        }, 0);\n        return;\n      }\n      pvjs2Zoomed = true;\n\n      that.pvjs.zoom(level * that.zoomScale);\n      that.pvjs2.panBy({x: 0, y: 0}); // trigger pan to sync pathways\n      that.pvjs.pan(that.pvjs2.getPan());\n    });\n\n    this.pvjs2.on('panned.renderer', function(point) {\n      if (pvjsPanned) {\n        // TODO see note for pvjs2Zoomed above\n        window.setTimeout(function() {\n          pvjsPanned = false;\n        }, 0);\n        return;\n      }\n      pvjs2Panned = true;\n      that.pvjs.pan(point);\n    });\n  };\n\n  /**\n   * Create an overlay with a message\n   * @param  {String} message Message why diffViewer shows nothing\n   */\n  PvjsDiffViewer.prototype.onNoDiff = function(message) {\n    // Create an overlay\n    if (this.$overlay === void 0) {\n      this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$diffviewer);\n    }\n\n    // Add a message\n    this.$overlay.append($('<div class=\"alert alert-info\"></div>').text(message));\n  };\n\n  /**\n   * When both pvjss are rendered\n   */\n  PvjsDiffViewer.prototype.onPvjsesRendered = function() {\n    if (this.checkPvjsesData()) {\n      this.getZoomScale();\n      this.displayDiff();\n    } else {\n      this.onNoDiff('One or both pathways were rendered using a format (ex. png) ' +\n          'that has no details about nodes.');\n    }\n  };\n\n  /**\n   * Check if both pvjss have pvjson objects\n   * @return {Boolean} True if pvjson is avaliable for both pvjss\n   */\n  PvjsDiffViewer.prototype.checkPvjsesData = function() {\n    return (this.pvjs.getSourceData().pvjson && this.pvjs2.getSourceData().pvjson);\n  };\n\n  /** @type {Number} zoom scale between pathways */\n  PvjsDiffViewer.prototype.zoomScale = 1;\n\n  /**\n   * Detect and cache zoom scale between pathways\n   */\n  PvjsDiffViewer.prototype.getZoomScale = function() {\n    this.zoomScale = this.pvjs.getZoom() / this.pvjs2.getZoom();\n  };\n\n  /**\n   * Entry point of diffViewer rendering and highlighting differences\n   */\n  PvjsDiffViewer.prototype.displayDiff = function() {\n    this.elements = this.pvjs.getSourceData().pvjson.elements;\n    this.elements2 = this.pvjs2.getSourceData().pvjson.elements;\n\n    // New elements have priority\n    this.elementsMerge = this.mergeElements(this.elements2, this.elements);\n\n    var diff = this.computeDiff();\n\n    // IF no diffs then display an overlay message and stop further rendering\n    if (diff.added.length + diff.updated.length + diff.removed.length === 0) {\n      this.onNoDiff('Pathways have no visual differences between them.');\n      return;\n    }\n\n    var $changesList = this.initDiffView();\n\n    // Store elements grouped by change type and group name\n    this.elementsCache = {added: {}, updated: {}, removed: {}};\n    this.elementsReferences = {};\n\n    this.renderDiffsOfType('added', diff.added, $changesList, this.elements2);\n    this.renderDiffsOfType('updated', diff.updated, $changesList, this.elementsMerge);\n    this.renderDiffsOfType('removed', diff.removed, $changesList, this.elements);\n\n    this.hookDiffNavigation();\n\n    // Highlight all changes\n    this.highlightType('added');\n    this.highlightType('updated');\n    this.highlightType('removed');\n  };\n\n  /**\n   * Merge lists by appending unique elements from second list to first list\n   * @param  {Array} elements\n   * @param  {Array} elements2\n   * @return {Array}\n   */\n  PvjsDiffViewer.prototype.mergeElements = function(elements, elements2) {\n    var elementsMerge = elements.slice();\n    var elementFound = false;\n\n    for (var e in elements2) {\n      elementFound = false;\n      for (var e2 in elementsMerge) {\n        if (elementsMerge[e2].id === elements2[e].id) {\n          elementFound = true;\n          break;\n        }\n      }\n\n      // If element is unique then add it to merge\n      if (!elementFound) {\n        elementsMerge.push(elements2[e]);\n      }\n    }\n\n    return elementsMerge;\n  };\n\n  /**\n   * Compute difference between elements of both pvjss\n   * @return {Object} An object with 3 arrays: updated, added and removed\n   */\n  PvjsDiffViewer.prototype.computeDiff = function() {\n    // Clone lists to be safe from modifying them internally\n    // (in case that pvjson was not deep-cloned)\n    var elements = this.elements.slice();    // Old pathway elements\n    var elements2 = this.elements2.slice();  // New pathway elements\n    var diff = {\n      updated: [],\n      added: [],\n      removed: []\n    };\n    var element;\n    var found;\n\n    for (var i = elements.length - 1; i >= 0; i--) {\n      element = elements[i];\n      found = false;\n\n      // Search for element by ID in second list\n      for (var j = elements2.length - 1; j >= 0; j--) {\n        if (elements[i].id === elements2[j].id) {\n          found = true;\n\n          // Check for changes\n          if (calculateElementDiff(elements[i], elements2[j])) {\n            diff.updated.push({\n              id: elements2[j].id,\n              'gpml:element': elements2[j]['gpml:element'] ||\n                  elements[i]['gpml:element'] || undefined,\n              type: elements2[j].type || elements[i].type || undefined,\n              shape: elements2[j].shape || elements[i].shape || undefined,\n              textContent: elements2[j].textContent || elements[i].textContent ||\n                  elements2[j].title || elements2[j].displayName || elements[i].title ||\n                  elements[i].displayName || undefined,\n              points: elements2[j].points || elements[i].points || undefined,\n              diff: calculateElementDiff(elements[i], elements2[j]),\n              _element: elements[i],\n              _element2: elements2[j]\n            });\n          }\n\n          // Remove found elements from search poll\n          elements.splice(i, 1);\n          elements2.splice(j, 1);\n\n          break;\n        }\n      }\n\n      if (!found) {\n        diff.removed.push(elements[i]);\n      }\n    }\n\n    // All not matched elements from second list are new\n    diff.added = elements2.slice();\n\n    return diff;\n  };\n\n  /**\n   * Calculate difference between 2 elements\n   * @param  {Object} element\n   * @param  {Object} element2\n   * @return {Object}          Difference object\n   */\n  function calculateElementDiff(element, element2) {\n    var diff = {\n      added: [],\n      removed: [],\n      updated: []\n    };\n\n    for (var e in element) {\n      if (!element2.hasOwnProperty(e)) {\n        diff.removed.push({key: e, value: element[e]});\n      } else {\n        if (element[e] !== element2[e] && isStringOrNumber(element[e]) &&\n            isStringOrNumber(element2[e])) {\n          diff.updated.push({key: e, value: element2[e], old: element[e]});\n        }\n        // else nothing\n      }\n    }\n\n    // Check for elements in element2 that are not in element\n    for (var e2 in element2) {\n      if (!element.hasOwnProperty(e2)) {\n        diff.added.push({key: e2, value: element2[e2]});\n      }\n    }\n\n    if (diff.added.length || diff.removed.length || diff.updated.length) {\n      return diff;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Check if passed argument is a string or a number\n   * @param  {Object|String|Number}  obj\n   * @return {Boolean}     True if passed argument is a string or number\n   */\n  function isStringOrNumber(obj) {\n    return (Object.prototype.toString.apply(1) === Object.prototype.toString.apply(obj) ||\n        Object.prototype.toString.apply('') === Object.prototype.toString.apply(obj));\n  }\n\n  /**\n   * Creates a container for titles and changes list\n   * @return {JQuery} jQuery object\n   */\n  PvjsDiffViewer.prototype.initDiffView = function() {\n    return $('<div class=\"changes changes-list\"></div>').appendTo(this.$paneCenter);\n  };\n\n  /**\n   * Create specific type containers for changes\n   * @param  {JQuery} $changesList\n   * @param  {String} type\n   * @param  {String} title\n   * @return {JQuery}              Changes list container\n   */\n  PvjsDiffViewer.prototype.initDiffViewList = function($changesList, type, title) {\n    var $changesContainer = $('<div class=\"changes-container\" data-level=\"1\" data-type=\"' +\n        type + '\">')\n      .appendTo($changesList)\n      .append($('<div class=\"changes-title changes-parent change-' + type + '\"><span>' +\n            title + '</span></div>'));\n\n    // Return changes list jQuery element\n    return $('<div class=\"changes-list\"></div>').appendTo($changesContainer);\n  };\n\n  /**\n   * Render differences of a specified type\n   * Group differences by elements types\n   * @param  {String} type\n   * @param  {Object} elementsDiff Elements differences\n   * @param  {JQuery} $changesList Changes list container\n   * @param  {Array} elements     List of elements\n   */\n  PvjsDiffViewer.prototype.renderDiffsOfType = function(\n      type, elementsDiff, $changesList, elements) {\n    if (elementsDiff.length === 0) {\n      return;\n    }\n\n    // Sort by gpml:element and shape\n    var elementsDiffSorted = elementsDiff.sort(sorterByElmentAndShape);\n\n    // Group elements\n    var groups = {};\n    var groupName = '';\n    var elementType = '';\n    var _type = '';\n    var $listContainer = null;\n    var groupsOrdered = [];\n\n    for (var d in elementsDiffSorted) {\n      elementType = elementsDiffSorted[d]['gpml:element'] ?\n          elementsDiffSorted[d]['gpml:element'].replace(/^gpml\\:/, '') : '';\n      _type = elementsDiffSorted[d].type ? elementsDiffSorted[d].type : '';\n\n      if (elementType === 'Interaction') {\n        groupName = 'Interactions';\n      } else if (elementType === 'DataNode') {\n        groupName = 'Data Nodes';\n      } else if (elementType === '' && _type !== '') { // Assuming it is a reference\n        // groupName = 'Reference'\n        continue;\n      } else if (elementType === 'Group') {\n        groupName = 'Groups';\n      } else {\n        // Assume that there are no other groups\n        groupName = 'Graphical Objects';\n      }\n\n      // If this is first element in group then init it\n      if (groups[groupName] === void 0) {\n        groups[groupName] = [];\n      }\n\n      groups[groupName].push(elementsDiffSorted[d]);\n    }\n\n    // Render only if at least one group exists\n    if (!$.isEmptyObject(groups)) {\n      $listContainer = this.initDiffViewList($changesList, type, type.charAt(0).toUpperCase() +\n          type.slice(1));\n\n      // Create an array of ordered groups\n      groupsOrdered = orderGroups(groups);\n\n      for (var i in groupsOrdered) {\n        this.renderDiffGroup(\n            type, groupsOrdered[i].name, groupsOrdered[i].group, $listContainer, elements);\n      }\n    }\n  };\n\n  /** @type {Array} Groups render order */\n  var groupsOrder = ['Data Nodes', 'Groups', 'Interactions', 'Graphical Objects'];\n\n  /**\n   * Order groups by groupsOrder\n   * If a group is not in groupsOrder append it\n   * @param  {Object} groups An object with groups\n   * @return {Array}        Ordered groups\n   */\n  function orderGroups(groups) {\n    var groupName = '';\n    var groupsOrdered = [];\n\n    // First add ordered groups\n    for (var i in groupsOrder) {\n      groupName = groupsOrder[i];\n\n      if (groups.hasOwnProperty(groupName)) {\n        groupsOrdered.push({group: groups[groupName], name: groupName});\n        delete groups[groupName];\n      }\n    }\n\n    // If there are still groups, add them to the end in any order\n    for (groupName in groups) {\n      groupsOrdered.push({group: groups[groupName], name: groupName});\n    }\n\n    return groupsOrdered;\n  }\n\n  /**\n   * Render a group\n   * @param  {String} type\n   * @param  {String} groupName\n   * @param  {Array} groupElements\n   * @param  {JQuery} $listContainer\n   * @param  {Array} elements  List of all elements.\n   *                           Used to get elements titles (replacing ids)\n   */\n  PvjsDiffViewer.prototype.renderDiffGroup = function(\n      type, groupName, groupElements, $listContainer, elements) {\n    var $container = $('<div class=\"changes-container\" data-level=\"2\" data-type=\"' + type + '\"/>')\n      .appendTo($listContainer);\n    var $containerTitle = $('<div class=\"changes-title changes-parent change-' + type +\n        '\"><span>' + groupName + '</span></div>')\n      .appendTo($container)\n      .data('group', groupName);\n    var $containerList = $('<div class=\"changes-list\" />').appendTo($container);\n    var elementTitle = '';\n    var $elementContainer;\n    var $elementTitle;\n    var elementChanges = null;\n    var $elementChanges;\n\n    // Sort group elements\n    groupElements = groupElements.sort(function(a, b) {\n      return getElementTitle(a, elements).toLowerCase() >\n          getElementTitle(b, elements).toLowerCase() ? 1 : -1;\n    });\n\n    // Render elements\n    for (var e in groupElements) {\n      elementTitle = getElementTitle(groupElements[e], elements);\n\n      $elementContainer = $('<div class=\"changes-container\" data-level=\"3\" data-type=\"' +\n          type + '\"/>')\n        .appendTo($containerList);\n      $elementTitle = $('<div class=\"changes-title change-' + type +\n          '\"><span>' + elementTitle + '</span></div>')\n        .appendTo($elementContainer);\n\n      elementChanges = this.getElementChanges(type, groupElements[e], elements);\n\n      // Render element changes (if any)\n      if (elementChanges && elementChanges.length) {\n        $elementChanges = $('<ul class=\"element-changes\"></ul>');\n        for (var change in elementChanges) {\n          $elementChanges.append('<li>' + elementChanges[change] + '</li>');\n        }\n\n        $elementChanges.appendTo($elementTitle);\n      }\n\n      // Store id and group\n      $elementTitle\n        .data('id', groupElements[e].id)\n        .data('group', groupName);\n\n      // TODO only for debug purpose\n      $elementTitle[0].pvjson = groupElements[e];\n\n      // Cache element\n      this.cacheElement(type, groupName, groupElements[e].id);\n    }\n  };\n\n  /**\n   * Cache element id based on type and group\n   * @param  {String} type\n   * @param  {String} group\n   * @param  {String} elementId\n   */\n  PvjsDiffViewer.prototype.cacheElement = function(type, group, elementId) {\n    // Create group if it does not exist\n    if (this.elementsCache[type][group] === void 0) {\n      this.elementsCache[type][group] = [];\n    }\n\n    // Add element to group\n    this.elementsCache[type][group].push(elementId);\n\n    // Reference\n    if (group === 'Reference') {\n      this.elementsReferences[elementId] = true;\n    }\n  };\n\n  /**\n   * Get an array of elements ids based on type and group\n   * @param  {String} type\n   * @param  {String} group\n   * @return {Array}       Array of ids\n   */\n  PvjsDiffViewer.prototype.getAllElementsIds = function(type, group) {\n    if (type === null || type === void 0) {\n      // Get all types\n      return [].concat(this.getAllElementsIds('added'),\n          this.getAllElementsIds('updated'),\n          this.getAllElementsIds('removed'));\n    } else {\n      if (group === null || group === void 0) {\n        // Get all groups\n        var elements = [];\n\n        for (var groupName in this.elementsCache[type]) {\n          elements = elements.concat(this.getAllElementsIds(type, groupName));\n        }\n\n        return elements;\n      } else {\n        // Get that group\n        return this.elementsCache[type][group].slice();\n      }\n    }\n  };\n\n  /**\n   * Check if the element with given id is a reference\n   * @param  {String}  id Element id\n   * @return {Boolean}    True if element if a reference\n   */\n  PvjsDiffViewer.prototype.isIdReference = function(id) {\n    return this.elementsReferences[id] === true;\n  };\n\n  /**\n   * Sorter function\n   */\n  function sorterByElmentAndShape(a, b) {\n    if (a['gpml:element'] === b['gpml:element']) {\n      return a.shape > b.shape ? 1 : -1;\n    }\n    if (a['gpml:element'] === undefined) {\n      return -1;\n    }\n    if (b['gpml:element'] === undefined) {\n      return 1;\n    }\n    return a['gpml:element'] > b['gpml:element'] ? 1 : -1;\n  }\n\n  /**\n   * Get element title\n   * @param  {Object} obj      Pvjson element\n   * @param  {Array} elements Array of pvjson elements\n   * @return {String}          Element title\n   */\n  function getElementTitle(obj, elements) {\n    if (obj['gpml:element'] === 'gpml:Interaction') {\n      return '' + lookupTitleById(obj.points[0].isAttachedTo, elements) +\n        ' <i class=\"icon icon-arrow-right\"></i> ' +\n        lookupTitleById(obj.points[1].isAttachedTo, elements);\n    } else if (obj['gpml:element'] === 'gpml:DataNode') {\n      return obj.textContent;\n    } else if (obj['gpml:element'] === 'gpml:Label') {\n      return obj.textContent;\n    } else if (obj['gpml:element'] === 'gpml:Shape') {\n      return obj.shape.slice(0, 1).toUpperCase() + obj.shape.slice(1);\n    } else if (obj['gpml:element'] === 'gpml:GraphicalLine') {\n      return 'Graphical line';\n    } else if (obj['gpml:element'] === 'gpml:State') {\n      return 'State ' + obj.textContent + ' (' + lookupTitleById(obj.isAttachedTo, elements) + ')';\n    } else if (obj['gpml:element'] === 'gpml:Group') {\n      return 'Group';\n    } else if (obj.type !== void 0) { // Assume it is a reference\n      return obj.textContent || obj.title || obj.displayName || 'no title';\n    }\n\n    return 'no title';\n  }\n\n  /**\n   * Get title of element with given id\n   * @param  {String} id\n   * @param  {Array} elements Array of pvjson elements\n   * @return {String}          Element title\n   */\n  function lookupTitleById(id, elements) {\n    // If element has no id then stop lookup\n    if (id === void 0) {\n      return 'Unknown';\n    }\n\n    for (var l in elements) {\n      if (elements[l].id !== null && id === elements[l].id) {\n        // Check if it is an interaction to avoid circular recursion\n        if (elements[l]['gpml:element'] === 'gpml:Interaction') {\n          return 'Interaction';\n        } else {\n          return getElementTitle(elements[l], elements);\n        }\n      }\n    }\n\n    // If no match found then return initial ID\n    return id;\n  }\n\n  var normalizationFloatKeys = ['width', 'height', 'x', 'y', 'rotation'];\n  var normalizationIdKeys = ['isPartOf', 'controller', 'controlled'];\n\n  /**\n   * Normalize values:\n   * * Round numbers\n   * * Replace ids with elements titles\n   * @param  {String|Number} value\n   * @param  {String} key\n   * @param  {Array} elements Array of pvjson elements\n   * @return {String|Number}          Normalized title\n   */\n  function normalizeValue(value, key, elements) {\n    if (normalizationFloatKeys.indexOf(key) !== -1) {\n      return Math.round(parseFloat(value) * 100) / 100;\n    } else if (normalizationIdKeys.indexOf(key) !== -1) {\n      return lookupTitleById(value, elements);\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * Get element changes\n   * @param  {String} type\n   * @param  {Object} element  Pvjson element\n   * @param  {Array} elements Array of pvjson elements\n   * @return {Array}          Array of strings (changes titles)\n   */\n  PvjsDiffViewer.prototype.getElementChanges = function(type, element, elements) {\n    var titles = [];\n\n    if (type === 'added') {\n      if (element.hasOwnProperty('entityReference')) {\n        titles.push('Added <strong>reference</strong>: ' + element.entityReference);\n      }\n    } else if (type === 'updated') {\n      var oldValue = '';\n      var newValue = '';\n      var diff = element.diff;\n\n      for (var addedIndex in diff.added) {\n        newValue = normalizeValue(diff.added[addedIndex].value,\n            diff.added[addedIndex].key,\n            elements);\n        titles.push('Added: <strong>' + diff.added[addedIndex].key + '</strong> ' + newValue);\n      }\n\n      for (var removedIndex in diff.removed) {\n        newValue = normalizeValue(diff.removed[removedIndex].value,\n            diff.removed[removedIndex].key,\n            elements);\n        titles.push('Removed: <strong>' + diff.removed[removedIndex].key + '</strong> ' + newValue);\n      }\n\n      for (var updatedIndex in diff.updated) {\n        oldValue = normalizeValue(diff.updated[updatedIndex].old,\n            diff.updated[updatedIndex].key,\n            elements);\n        newValue = normalizeValue(diff.updated[updatedIndex].value,\n            diff.updated[updatedIndex].key,\n            elements);\n\n        titles.push('<strong>' + diff.updated[updatedIndex].key + ':</strong> ' + oldValue +\n            ' <i class=\"icon icon-arrow-right\"></i> ' + newValue);\n      }\n    }\n\n    return titles;\n  };\n\n  /**\n   * Hook clicking on diffViewere of using arrow keys when diffViewere is active\n   */\n  PvjsDiffViewer.prototype.hookDiffNavigation = function() {\n    var $paneCenter = this.$paneCenter;\n    var that = this;\n    var isFocused = false;\n    var initialZoom = this.pvjs.getZoom();\n    var initialZoom2 = this.pvjs2.getZoom();\n\n    //this.initHighlighting();\n\n    $paneCenter.on('click', '.changes-title', function(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      isFocused = true;\n\n      // Visually opening/closing titles\n      var $this = $(this);\n      var $active = $this;\n\n      // Only if element is not active\n      if (!$this.parent().hasClass('active')) {\n        $paneCenter.find('.active').removeClass('active');\n        $paneCenter.find('.open').removeClass('open');\n        $paneCenter.find('.focus').removeClass('focus');\n        $this.parent().addClass('active focus');\n        $this.parentsUntil($paneCenter).addClass('open');\n\n        // Attenuate all previous elements\n        that.attenuate();\n\n        // Highlight selected\n        that.highlightIds(that.getTitleIds($active), getTitleType($active));\n      }\n    }).on('dblclick', '.changes-title', function(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n\n      that.zoomToTitle($(this), initialZoom, initialZoom2);\n    });\n\n    var keysMap = {\n      37: 'left',\n      38: 'up',\n      39: 'right',\n      40: 'down'\n    };\n\n    $(document)\n      .click(function(ev) {\n        isFocused = false;\n        $paneCenter.find('.focus').removeClass('focus');\n      })\n      .keydown(function(ev) {\n        if (!isFocused) {\n          return;\n        }\n        if (ev.keyCode < 37 || ev.keyCode > 40) {\n          return;\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        that.navigate(keysMap[ev.keyCode]);\n\n        return false;\n      });\n  };\n\n  /**\n   * Get change type from jQuery title\n   * @param  {JQuery} $active Change title\n   * @return {String|Null}         Change type\n   */\n  function getTitleType($active) {\n    if ($active.length) {\n      return $active.parent().data('type');\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get id of change title.\n   * If it is a parent title then get ids of change title and all its children\n   * @param  {JQuery} $active Change title\n   * @return {Array}         Array of pvjson elements ids\n   */\n  PvjsDiffViewer.prototype.getTitleIds = function($active) {\n    var ids = [];\n    if ($active.length) {\n      var level = +$active.parent().data('level');\n      var type = getTitleType($active);\n      var group = null;\n      var id = null;\n\n      if (level === 1) {\n        // group and id = null\n      } else if (level === 2) {\n        group = $active.data('group');\n      } else if (level === 3) {\n        group = $active.data('group');\n        id = $active.data('id');\n      }\n\n      ids = this.getIds(type, group, id);\n    }\n\n    return ids;\n  };\n\n  /**\n   * Get ids of element by type, group and element id\n   * @param  {String} type\n   * @param  {String} group\n   * @param  {String} id\n   * @return {Array}       Array of pvjson elements ids\n   */\n  PvjsDiffViewer.prototype.getIds = function(type, group, id) {\n    var ids = [];\n    if (type && group && id) {\n      ids = [id];\n    } else {\n      ids = this.getAllElementsIds(type, group);\n    }\n\n    return ids;\n  };\n\n  /**\n   * Highlight pvjson elements by ids\n   * @param  {Array} ids  Arraw of pvjson elements ids\n   * @param  {String} type Changes type\n   */\n  PvjsDiffViewer.prototype.highlightIds = function(ids, type) {\n    var colors = {};\n\n    if (type === 'added') {\n      colors.backgroundColor = colors.borderColor = '#0E53A7';\n    } else if (type === 'updated') {\n      colors.backgroundColor = colors.borderColor = '#FFF700';\n    } else if (type === 'removed') {\n      colors.backgroundColor = colors.borderColor = '#F10026';\n    }\n\n    for (var i in ids) {\n      var highlightString;\n      // If is a reference\n      if (this.isIdReference(ids[i])) {\n        highlightString = 'xref:id:' + ids[i];\n      } else {\n        highlightString = '#' + ids[i];\n      }\n\n      if (type === 'removed' || type === 'updated') {\n        this.pvjs.highlight(highlightString, null, colors);\n      }\n      if (type === 'updated' || type === 'added') {\n        this.pvjs2.highlight(highlightString, null, colors);\n      }\n    }\n  };\n\n  /**\n   * Highlight all pvjson elements that have changes of provided type\n   * @param  {String} type Change type\n   */\n  PvjsDiffViewer.prototype.highlightType = function(type) {\n    this.highlightIds(this.getIds(type), type);\n  };\n\n  /**\n   * Highlight all changes of a change title\n   * @param  {jQuery} $active Change title\n   */\n  PvjsDiffViewer.prototype.highlightTitle = function($active) {\n    this.highlightIds(this.getTitleIds($active), getTitleType($active));\n  };\n\n  /**\n   * Zoom and pan pathways in such a way that elements\n   * from changes title will be focused (maximally visible)\n   * @param  {JQuery} $active       Change title\n   * @param  {Float} relativeZoom1 1/Initial zoom of first pathway\n   * @param  {Float} relativeZoom2 1/Initial zoom of second pathway\n   * @return {[type]}               [description]\n   */\n  PvjsDiffViewer.prototype.zoomToTitle = function($active, relativeZoom1, relativeZoom2) {\n    if (relativeZoom1 === void 0) {\n      relativeZoom1 = 1;\n    }\n    if (relativeZoom2 === void 0) {\n      relativeZoom2 = 1;\n    }\n\n    var type = getTitleType($active);\n    var relativeZoom = type === 'added' ? relativeZoom2 : relativeZoom1;\n    var zoom = relativeZoom;\n    var pvjs = type === 'added' ? this.pvjs2 : this.pvjs;\n    var selector = pvjs.getSourceData().selector;\n    var bBox = selector.getBBox();\n    var ids = this.getTitleIds($active);\n    var highlightSelector = selector.filteredByCallback(function(element) {\n      return (element.id !== void 0 && ids.indexOf(element.id) !== -1);\n    });\n    var highlightBBox = highlightSelector.getBBox();\n\n    // If updated get BBox of element from both screens\n    if (type === 'updated') {\n      highlightSelector = this.pvjs2.getSourceData().selector.filteredByCallback(function(element) {\n        return (element.id !== void 0 && ids.indexOf(element.id) !== -1);\n      });\n      var highlightBBox2 = highlightSelector.getBBox();\n\n      highlightBBox.left = Math.min(highlightBBox.left, highlightBBox2.left);\n      highlightBBox.top = Math.min(highlightBBox.top, highlightBBox2.top);\n      highlightBBox.right = Math.max(highlightBBox.right, highlightBBox2.right);\n      highlightBBox.bottom = Math.max(highlightBBox.bottom, highlightBBox2.bottom);\n      highlightBBox.width = Math.abs(highlightBBox.right - highlightBBox.left);\n      highlightBBox.height = Math.abs(highlightBBox.bottom - highlightBBox.top);\n    }\n\n    zoom = relativeZoom / (Math.max(\n          highlightBBox.width / bBox.width, highlightBBox.height / bBox.height) ||\n        1);\n\n    // Lower zoom by 30%\n    zoom *= 0.7;\n\n    pvjs.zoom(zoom);\n\n    // Get real set zoom\n    var boundedZoom = pvjs.getZoom();\n\n    // Center pvjs (it is necessary to pan by 15 because of previous zoom out by 30%)\n    var x = -highlightBBox.left * boundedZoom + (highlightBBox.width * boundedZoom * 0.15);\n    var y = -highlightBBox.top * boundedZoom + (highlightBBox.height * boundedZoom * 0.15);\n\n    pvjs.pan({x: x, y: y});\n  };\n\n  /**\n   * Navigate to provided direction. Relative to focused change title\n   * @param  {String} direction Navigation direction\n   */\n  PvjsDiffViewer.prototype.navigate = function(direction) {\n    var $paneCenter = this.$paneCenter;\n    var $focused = $paneCenter.find('.focus').first();\n    var $next = null;\n    var $nextTitle = null;\n\n    if (direction === 'up' || direction === 'left') {\n      // Previous sibling\n      $next = $focused.prev();\n\n      // If no previous sibling than next is parent\n      if ($next.length === 0) {\n        $next = $focused.parent().closest('.changes-container');\n      }\n    } else if (direction === 'down' || direction === 'right') {\n      // First child\n      $next = $focused.children('.changes-list').children('.changes-container').first();\n\n      // Next parent sibling if no childs\n      if ($next.length === 0) {\n        $next = $focused.next();\n\n        if ($next.length === 0) {\n          $next = $focused.parent().closest('.changes-container').next();\n          if ($next.length === 0) {\n            $next = $focused.parent().closest('.changes-container').parent()\n              .closest('.changes-container').next();\n          }\n        }\n      }\n    }\n\n    if ($next && $next.length && $next.get(0) !== $focused.get(0)) {\n      $paneCenter.find('.active').removeClass('active');\n      $paneCenter.find('.open').removeClass('open');\n      $paneCenter.find('.focus').removeClass('focus');\n      $next.addClass('active focus open');\n      $next.parentsUntil($paneCenter).addClass('open');\n\n      $nextTitle = $next.children('.changes-title');\n\n      // Scroll diffviewer to contain focused title\n      if ($nextTitle.offset().top < 0) {\n        $paneCenter.scrollTop($paneCenter.scrollTop() + $nextTitle.offset().top);\n      } else if ($nextTitle.offset().top + $nextTitle.outerHeight() > $paneCenter.height()) {\n        $paneCenter.scrollTop($paneCenter.scrollTop() + ($nextTitle.offset().top +\n              $nextTitle.outerHeight() - $paneCenter.height()));\n      }\n\n      // Attenuate all previous elements\n      this.attenuate();\n      // Highlight selected\n      this.highlightTitle($next.children('.changes-title'));\n    }\n  };\n\n  /**\n   * Initialize highlighting for pathways\n   * Store highlighter instances as this.h1 and this.h2\n   */\n  PvjsDiffViewer.prototype.initHighlighting = function() {\n    this.hi = window.pvjsHighlighter(this.pvjs, {displayInputField: false});\n    this.hi2 = window.pvjsHighlighter(this.pvjs2, {displayInputField: false});\n  };\n\n  /**\n   * Remove highlighting from all elements\n   */\n  PvjsDiffViewer.prototype.attenuate = function() {\n    this.pvjs.attenuate(null);\n    this.pvjs2.attenuate(null);\n  };\n\n  /**\n   * Expose plugin globally as pvjsDiffviewer\n   */\n  window.PvjsDiffViewer = PvjsDiffViewer;\n})(window, window.jQuery || window.Zepto);\n"],"sourceRoot":"/source/"}