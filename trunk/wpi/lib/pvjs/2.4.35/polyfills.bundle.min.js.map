{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","tmp/modernizr-custom.js"],"names":[],"mappings":"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","file":"polyfills.bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * modernizr v3.0.0-alpha.4\n * Build http://modernizr.com/download/#-audio-capture-checked-contains-contenteditable-dart-dataset-details-directory-history-inlinesvg-input-inputtypes-json-notification-opacity-placeholder-promises-search-shapes-svg-target-template-texttrackapi_track-time-unicode-video-addtest-fnbind-printshiv-testprop-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Alexander Farkas\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.0.0-alpha.4',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix' : '',\n      'enableClasses' : true,\n      'enableJSClass' : true,\n      'usePrefixes' : true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function( test, cb ) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for\n      // actual async tests. This is in case people listen to\n      // synchronous tests. I would leave it out, but the code\n      // to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function( name, fn, options ) {\n      tests.push({name : name, fn : fn, options : options });\n    },\n\n    addAsyncTest: function (fn) {\n      tests.push({name : null, fn : fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create\n  // so we can force non test results\n  // to be non \"own\" properties.\n  var Modernizr = function(){};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it\n  // rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean for if typeof obj is exactly type.\n   */\n  function is( obj, type ) {\n    return typeof obj === type;\n  }\n  ;\n\n  // Run through all tests and detect their support in the current UA.\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for ( var featureIdx in tests ) {\n      featureNames = [];\n      feature = tests[featureIdx];\n      // run the test, throw the return value into the Modernizr,\n      //   then based on that boolean, define an appropriate className\n      //   and push it into an array of classes we'll join later.\n      //\n      //   If there is no name, it's an 'async' test that is run,\n      //   but not directly added to the object. That should\n      //   be done with a post-run addTest call.\n      if ( feature.name ) {\n        featureNames.push(feature.name.toLowerCase());\n\n        if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n          // Add all the aliases into the names list\n          for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n          }\n        }\n      }\n\n      // Run the test, or use the raw value if it's not a function\n      result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n      // Set each of the names on the Modernizr object\n      for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n        featureName = featureNames[nameIdx];\n        // Support dot properties as sub tests. We don't do checking to make sure\n        // that the implied parent tests have been added. You must call them in\n        // order (either in the test, or make the parent test a dependency).\n        //\n        // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n        // hashtag famous last words\n        featureNameSplit = featureName.split('.');\n\n        if (featureNameSplit.length === 1) {\n          Modernizr[featureNameSplit[0]] = result;\n        } else {\n          // cast to a Boolean, if not one already\n          /* jshint -W053 */\n          if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n          }\n\n          Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n        }\n\n        classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n      }\n    }\n  }\n\n  ;\n\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\n  var hasOwnProp;\n\n  (function() {\n    var _hasOwnProperty = ({}).hasOwnProperty;\n    /* istanbul ignore else */\n    /* we have no way of testing IE 5.5 or safari 2,\n     * so just assume the else gets hit */\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n      hasOwnProp = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n  })();\n\n  \n\n  var docElement = document.documentElement;\n  \n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses( classes ) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (we do this independently of the `enableClasses`\n    // option)\n    // Handle classPrefix on this too\n    if(Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)'+classPrefix+'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1'+classPrefix+'js$2');\n    }\n\n    if(Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      isSVG ? docElement.className.baseVal = className : docElement.className = className;\n    }\n\n  }\n\n  ;\n\n  // As far as I can think of, we shouldn't need or\n  // allow 'on' for non-async tests, and you can't do\n  // async tests without this 'addTest' module.\n\n  // Listeners for async or post-run tests\n  ModernizrProto._l = {};\n\n  // 'addTest' implies a test after the core runloop,\n  // So we'll add in the events\n  ModernizrProto.on = function( test, cb ) {\n    // Create the list of listeners if it doesn't exist\n    if (!this._l[test]) {\n      this._l[test] = [];\n    }\n\n    // Push this test on to the listener list\n    this._l[test].push(cb);\n\n    // If it's already been resolved, trigger it on next tick\n    if (Modernizr.hasOwnProperty(test)) {\n      // Next Tick\n      setTimeout(function() {\n        Modernizr._trigger(test, Modernizr[test]);\n      }, 0);\n    }\n  };\n\n  ModernizrProto._trigger = function( test, res ) {\n    if (!this._l[test]) {\n      return;\n    }\n\n    var cbs = this._l[test];\n\n    // Force async\n    setTimeout(function() {\n      var i, cb;\n      for (i = 0; i < cbs.length; i++) {\n        cb = cbs[i];\n        cb(res);\n      }\n    },0);\n\n    // Don't trigger these again\n    delete this._l[test];\n  };\n\n  /**\n   * addTest allows the user to define their own feature tests\n   * the result will be added onto the Modernizr object,\n   * as well as an appropriate className set on the html element\n   *\n   * @param feature - String naming the feature\n   * @param test - Function returning true if feature is supported, false if not\n   */\n  function addTest( feature, test ) {\n    if ( typeof feature == 'object' ) {\n      for ( var key in feature ) {\n        if ( hasOwnProp( feature, key ) ) {\n          addTest( key, feature[ key ] );\n        }\n      }\n    } else {\n\n      feature = feature.toLowerCase();\n      var featureNameSplit = feature.split('.');\n      var last = Modernizr[featureNameSplit[0]];\n\n      // Again, we don't check for parent test existence. Get that right, though.\n      if (featureNameSplit.length == 2) {\n        last = last[featureNameSplit[1]];\n      }\n\n      if ( typeof last != 'undefined' ) {\n        // we're going to quit if you're trying to overwrite an existing test\n        // if we were to allow it, we'd do this:\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n        //   docElement.className = docElement.className.replace( re, '' );\n        // but, no rly, stuff 'em.\n        return Modernizr;\n      }\n\n      test = typeof test == 'function' ? test() : test;\n\n      // Set the value (this is the magic, right here).\n      if (featureNameSplit.length == 1) {\n        Modernizr[featureNameSplit[0]] = test;\n      } else {\n        // cast to a Boolean, if not one already\n        /* jshint -W053 */\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n        }\n\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n      }\n\n      // Set a single class (either `feature` or `no-feature`)\n      /* jshint -W041 */\n      setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);\n      /* jshint +W041 */\n\n      // Trigger the event\n      Modernizr._trigger(feature, test);\n    }\n\n    return Modernizr; // allow chaining.\n  }\n\n  // After all the tests are run, add self\n  // to the Modernizr prototype\n  Modernizr._q.push(function() {\n    ModernizrProto.addTest = addTest;\n  });\n\n  \n\n  // Take the html5 variable out of the\n  // html5shiv scope so we can return it.\n  var html5;\n  if (!isSVG) {\n\n    /**\n     * @preserve HTML5 Shiv 3.7.2 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n      /*jshint evil:true */\n      /** version */\n      var version = '3.7.2';\n\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n          var a = document.createElement('a');\n          a.innerHTML = '<xyz></xyz>';\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n          supportsHtml5Styles = ('hidden' in a);\n\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {\n            // assign a false positive if unable to shiv\n            (document.createElement)('a');\n            var frag = document.createDocumentFragment();\n            return (\n              typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n            );\n          }());\n        } catch(e) {\n          // assign a false positive if detection fails => unable to shiv\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n      /**\n       * Extends the built-in list of html5 elements\n       * @memberOf html5\n       * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n       * @param {Document} ownerDocument The context document.\n       */\n      function addElements(newElements, ownerDocument) {\n        var elements = html5.elements;\n        if(typeof elements != 'string'){\n          elements = elements.join(' ');\n        }\n        if(typeof newElements != 'string'){\n          newElements = newElements.join(' ');\n        }\n        html5.elements = elements +' '+ newElements;\n        shivDocument(ownerDocument);\n      }\n\n      /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n          data = {};\n          expanID++;\n          ownerDocument[expando] = expanID;\n          expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n          data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n          node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n          node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n        for(;i<l;i++){\n          clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n          data.cache = {};\n          data.createElem = ownerDocument.createElement;\n          data.createFrag = ownerDocument.createDocumentFragment;\n          data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n            return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n                                                        'var n=f.cloneNode(),c=n.createElement;' +\n                                                        'h.shivMethods&&(' +\n                                                        // unroll the `createElement` calls\n                                                        getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {\n          data.createElem(nodeName);\n          data.frag.createElement(nodeName);\n          return 'c(\"' + nodeName + '\")';\n        }) +\n          ');return n}'\n                                                       )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n                                        // corrects block display not defined in IE6/7/8/9\n                                        'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n                                        // adds styling not present in IE6/7/8/9\n                                        'mark{background:#FF0;color:#000}' +\n                                        // hides non-rendered elements\n                                        'template{display:none}'\n                                       );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n        /**\n         * current version of html5shiv\n         */\n        'version': version,\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment,\n\n        //extends list of elements\n        addElements: addElements\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n      /*------------------------------- Print Shiv -------------------------------*/\n\n      /** Used to filter media types */\n      var reMedia = /^$|\\b(?:all|print)\\b/;\n\n      /** Used to namespace printable elements */\n      var shivNamespace = 'html5shiv';\n\n      /** Detect whether the browser supports shivable style sheets */\n      var supportsShivableSheets = !supportsUnknownElements && (function() {\n        // assign a false negative if unable to shiv\n        var docEl = document.documentElement;\n        return !(\n          typeof document.namespaces == 'undefined' ||\n            typeof document.parentWindow == 'undefined' ||\n            typeof docEl.applyElement == 'undefined' ||\n            typeof docEl.removeNode == 'undefined' ||\n            typeof window.attachEvent == 'undefined'\n        );\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Wraps all HTML5 elements in the given document with printable elements.\n       * (eg. the \"header\" element is wrapped with the \"html5shiv:header\" element)\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Array} An array wrappers added.\n       */\n      function addWrappers(ownerDocument) {\n        var node,\n        nodes = ownerDocument.getElementsByTagName('*'),\n          index = nodes.length,\n          reElements = RegExp('^(?:' + getElements().join('|') + ')$', 'i'),\n          result = [];\n\n        while (index--) {\n          node = nodes[index];\n          if (reElements.test(node.nodeName)) {\n            result.push(node.applyElement(createWrapper(node)));\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Creates a printable wrapper for the given element.\n       * @private\n       * @param {Element} element The element.\n       * @returns {Element} The wrapper.\n       */\n      function createWrapper(element) {\n        var node,\n        nodes = element.attributes,\n          index = nodes.length,\n          wrapper = element.ownerDocument.createElement(shivNamespace + ':' + element.nodeName);\n\n        // copy element attributes to the wrapper\n        while (index--) {\n          node = nodes[index];\n          node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);\n        }\n        // copy element styles to the wrapper\n        wrapper.style.cssText = element.style.cssText;\n        return wrapper;\n      }\n\n      /**\n       * Shivs the given CSS text.\n       * (eg. header{} becomes html5shiv\\:header{})\n       * @private\n       * @param {String} cssText The CSS text to shiv.\n       * @returns {String} The shived CSS text.\n       */\n      function shivCssText(cssText) {\n        var pair,\n        parts = cssText.split('{'),\n          index = parts.length,\n          reElements = RegExp('(^|[\\\\s,>+~])(' + getElements().join('|') + ')(?=[[\\\\s,>+~#.:]|$)', 'gi'),\n          replacement = '$1' + shivNamespace + '\\\\:$2';\n\n        while (index--) {\n          pair = parts[index] = parts[index].split('}');\n          pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);\n          parts[index] = pair.join('}');\n        }\n        return parts.join('{');\n      }\n\n      /**\n       * Removes the given wrappers, leaving the original elements.\n       * @private\n       * @params {Array} wrappers An array of printable wrappers.\n       */\n      function removeWrappers(wrappers) {\n        var index = wrappers.length;\n        while (index--) {\n          wrappers[index].removeNode();\n        }\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document for print.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivPrint(ownerDocument) {\n        var shivedSheet,\n        wrappers,\n        data = getExpandoData(ownerDocument),\n          namespaces = ownerDocument.namespaces,\n          ownerWindow = ownerDocument.parentWindow;\n\n        if (!supportsShivableSheets || ownerDocument.printShived) {\n          return ownerDocument;\n        }\n        if (typeof namespaces[shivNamespace] == 'undefined') {\n          namespaces.add(shivNamespace);\n        }\n\n        function removeSheet() {\n          clearTimeout(data._removeSheetTimer);\n          if (shivedSheet) {\n            shivedSheet.removeNode(true);\n          }\n          shivedSheet= null;\n        }\n\n        ownerWindow.attachEvent('onbeforeprint', function() {\n\n          removeSheet();\n\n          var imports,\n          length,\n          sheet,\n          collection = ownerDocument.styleSheets,\n            cssText = [],\n            index = collection.length,\n            sheets = Array(index);\n\n          // convert styleSheets collection to an array\n          while (index--) {\n            sheets[index] = collection[index];\n          }\n          // concat all style sheet CSS text\n          while ((sheet = sheets.pop())) {\n            // IE does not enforce a same origin policy for external style sheets...\n            // but has trouble with some dynamically created stylesheets\n            if (!sheet.disabled && reMedia.test(sheet.media)) {\n\n              try {\n                imports = sheet.imports;\n                length = imports.length;\n              } catch(er){\n                length = 0;\n              }\n\n              for (index = 0; index < length; index++) {\n                sheets.push(imports[index]);\n              }\n\n              try {\n                cssText.push(sheet.cssText);\n              } catch(er){}\n            }\n          }\n\n          // wrap all HTML5 elements with printable elements and add the shived style sheet\n          cssText = shivCssText(cssText.reverse().join(''));\n          wrappers = addWrappers(ownerDocument);\n          shivedSheet = addStyleSheet(ownerDocument, cssText);\n\n        });\n\n        ownerWindow.attachEvent('onafterprint', function() {\n          // remove wrappers, leaving the original elements, and remove the shived style sheet\n          removeWrappers(wrappers);\n          clearTimeout(data._removeSheetTimer);\n          data._removeSheetTimer = setTimeout(removeSheet, 500);\n        });\n\n        ownerDocument.printShived = true;\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose API\n      html5.type += ' print';\n      html5.shivPrint = shivPrint;\n\n      // shiv for print\n      shivPrint(document);\n\n    }(this, document));\n  }\n\n  ;\n\n  /**\n   * contains returns a boolean for if substr is found within str.\n   */\n  function contains( str, substr ) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   */\n  var modElem = {\n    elem : createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style : modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before\n  // mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if(!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  // Inject element with style element and some CSS rules\n  function injectElementWithStyles( rule, callback, nodes, testnames ) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if ( parseInt(nodes, 10) ) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while ( nodes-- ) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if ( body.fake ) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if ( body.fake ) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  // Helper function for converting camelCase to kebab-case,\n  // e.g. boxSizing -> box-sizing\n  function domToCSS( name ) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n  // Function to allow us to use native feature detection functionality if available.\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps ( props, value ) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function( node ) {\n        return getComputedStyle(node, null).position == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  // Helper function for converting kebab-case to camelCase,\n  // e.g. box-sizing -> boxSizing\n  function cssToDOM( name ) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps( props, prefixed, value, skipValueTest ) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if(!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    var elems = ['modernizr', 'tspan'];\n    while ( !mStyle.style ) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for ( i = 0; i < propsLength; i++ ) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if ( mStyle.style[prop] !== undefined ) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  // Modernizr.testProp() investigates whether a given style property is recognized\n  // Property names can be provided in either camelCase or kebab-case.\n  // Modernizr.testProp('pointerEvents')\n  // Also accepts optional 2nd arg, of a value to use for native feature detection, e.g.:\n  // Modernizr.testProp('pointerEvents', 'none')\n  var testProp = ModernizrProto.testProp = function( prop, value, useValue ) {\n    return testProps([prop], undefined, value, useValue);\n  };\n  \n\n  // Change the function's scope.\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n/*!\n{\n  \"name\" : \"HTML5 Audio Element\",\n  \"property\": \"audio\",\n  \"tags\" : [\"html5\", \"audio\", \"media\"]\n}\n!*/\n/* DOC\nDetects the audio element\n*/\n\n  // This tests evaluates support of the audio element, as well as\n  // testing what types of content it supports.\n  //\n  // We're using the Boolean constructor here, so that we can extend the value\n  // e.g.  Modernizr.audio     // true\n  //       Modernizr.audio.ogg // 'probably'\n  //\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n  //                     thx to NielsLeenheer and zcorpan\n\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n  Modernizr.addTest('audio', function() {\n    /* jshint -W053 */\n    var elem = createElement('audio');\n    var bool = false;\n\n    try {\n      if ( bool = !!elem.canPlayType ) {\n        bool      = new Boolean(bool);\n        bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n        bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n        bool.opus  = elem.canPlayType('audio/ogg; codecs=\"opus\"') .replace(/^no$/,'');\n\n        // Mimetypes accepted:\n        //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n        //   bit.ly/iphoneoscodecs\n        bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n        bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n                     elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n      }\n    } catch(e) { }\n\n    return bool;\n  });\n\n/*!\n{\n  \"name\": \"Content Editable\",\n  \"property\": \"contenteditable\",\n  \"caniuse\": \"contenteditable\",\n  \"notes\": [{\n    \"name\": \"WHATWG spec\",\n    \"href\": \"http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#contenteditable\"\n  }]\n}\n!*/\n/* DOC\nDetects support for the `contenteditable` attribute of elements, allowing their DOM text contents to be edited directly by the user.\n*/\n\n  Modernizr.addTest('contenteditable', function() {\n    // early bail out\n    if (!('contentEditable' in docElement)) return;\n\n    // some mobile browsers (android < 3.0, iOS < 5) claim to support\n    // contentEditable, but but don't really. This test checks to see\n    // confirms whether or not it actually supports it.\n\n    var div = createElement('div');\n    div.contentEditable = true;\n    return div.contentEditable === 'true';\n  });\n\n\n  // Following spec is to expose vendor-specific style properties as:\n  //   elem.style.WebkitBorderRadius\n  // and the following would be incorrect:\n  //   elem.style.webkitBorderRadius\n\n  // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n  // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n  //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n  // More here: github.com/Modernizr/Modernizr/issues/issue/21\n  var omPrefixes = 'Moz O ms Webkit';\n  \n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  \n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  \n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   */\n  function testDOMProps( props, obj, elem ) {\n    var item;\n\n    for ( var i in props ) {\n      if ( props[i] in obj ) {\n\n        // return the property name as a string\n        if (elem === false) return props[i];\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   *     We specify literally ALL possible (known and/or likely) properties on\n   *     the element including the non-vendor prefixed one, for forward-\n   *     compatibility.\n   */\n  function testPropsAll( prop, prefixed, elem, value, skipValueTest ) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if(is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  //     or any of its vendor-prefixed variants, is recognized\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  \n\n  /**\n   * atRule returns a given CSS property at-rule (eg @keyframes), possibly in\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @param prop - String naming the property to test\n   */\n\n  var atRule = function(prop) {\n    var length = prefixes.length;\n    var cssrule = window.CSSRule;\n    var rule;\n\n    if (typeof cssrule === 'undefined') {\n      return undefined;\n    }\n\n    if (!prop) {\n      return false;\n    }\n\n    // remove literal @ from beginning of provided property\n    prop = prop.replace(/^@/,'');\n\n    // CSSRules use underscores instead of dashes\n    rule = prop.replace(/-/g,'_').toUpperCase() + '_RULE';\n\n    if (rule in cssrule) {\n      return '@' + prop;\n    }\n\n    for ( var i = 0; i < length; i++ ) {\n      // prefixes gives us something like -o-, and we want O_\n      var prefix = prefixes[i];\n      var thisRule = prefix.toUpperCase() + '_' + rule;\n\n      if (thisRule in cssrule) {\n        return '@-' + prefix.toLowerCase() + '-' + prop;\n      }\n    }\n\n    return false;\n  };\n\n  \n\n  // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n  // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\n  // Properties can be passed as DOM-style camelCase or CSS-style kebab-case.\n  // Return values will always be in camelCase; if you want kebab-case, use Modernizr.prefixedCSS().\n\n  // If you're trying to ascertain which transition end event to bind to, you might do something like...\n  //\n  //     var transEndEventNames = {\n  //         'WebkitTransition' : 'webkitTransitionEnd',// Saf 6, Android Browser\n  //         'MozTransition'    : 'transitionend',      // only for FF < 15\n  //         'transition'       : 'transitionend'       // IE10, Opera, Chrome, FF 15+, Saf 7+\n  //     },\n  //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\n  var prefixed = ModernizrProto.prefixed = function( prop, obj, elem ) {\n    if (prop.indexOf('@') === 0) {\n      return atRule(prop);\n    }\n\n    if (prop.indexOf('-') != -1) {\n      // Convert kebab-case to camelCase\n      prop = cssToDOM(prop);\n    }\n    if (!obj) {\n      return testPropsAll(prop, 'pfx');\n    } else {\n      // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n      return testPropsAll(prop, obj, elem);\n    }\n  };\n\n  \n/*!\n{\n  \"name\": \"Dart\",\n  \"property\": \"dart\",\n  \"authors\": [\"Theodoor van Donge\"],\n  \"notes\": [{\n    \"name\": \"Language website\",\n    \"href\": \"http://www.dartlang.org/\"\n  }]\n}\n!*/\n/* DOC\nDetects native support for the Dart programming language.\n*/\n\n  Modernizr.addTest('dart', !!prefixed('startDart', navigator));\n\n/*!\n{\n  \"name\": \"History API\",\n  \"property\": \"history\",\n  \"caniuse\": \"history\",\n  \"tags\": [\"history\"],\n  \"authors\": [\"Hay Kranen\", \"Alexander Farkas\"],\n  \"notes\": [{\n    \"name\": \"W3C Spec\",\n    \"href\": \"http://www.w3.org/TR/html51/browsers.html#the-history-interface\"\n  }, {\n    \"name\": \"MDN documentation\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.history\"\n  }],\n  \"polyfills\": [\"historyjs\", \"html5historyapi\"]\n}\n!*/\n/* DOC\nDetects support for the History API for manipulating the browser session history.\n*/\n\n  Modernizr.addTest('history', function() {\n    // Issue #733\n    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support\n    // Unfortunately support is really buggy and there is no clean way to detect\n    // these bugs, so we fall back to a user agent sniff :(\n    var ua = navigator.userAgent;\n\n    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies\n    // itself as 'Mobile Safari' as well, nor Windows Phone (issue #1471).\n    if ((ua.indexOf('Android 2.') !== -1 ||\n        (ua.indexOf('Android 4.0') !== -1)) &&\n        ua.indexOf('Mobile Safari') !== -1 &&\n        ua.indexOf('Chrome') === -1 &&\n        ua.indexOf('Windows Phone') === -1) {\n      return false;\n    }\n\n    // Return the regular check\n    return (window.history && 'pushState' in window.history);\n  });\n\n\n  var attrs = {};\n  \n\n  var inputattrs = 'autocomplete autofocus list placeholder max min multiple pattern required step'.split(' ');\n  \n\n  var inputElem = createElement('input');\n  \n/*!\n{\n  \"name\": \"Input attributes\",\n  \"property\": \"input\",\n  \"tags\": [\"forms\"],\n  \"authors\": [\"Mike Taylor\"],\n  \"notes\": [{\n    \"name\": \"WHATWG spec\",\n    \"href\": \"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\"\n  }],\n  \"knownBugs\": [\"Some blackberry devices report false positive for input.multiple\"]\n}\n!*/\n/* DOC\nDetects support for HTML5 `<input>` element attributes and exposes Boolean subproperties with the results:\n\n```javascript\nModernizr.input.autocomplete\nModernizr.input.autofocus\nModernizr.input.list\nModernizr.input.max\nModernizr.input.min\nModernizr.input.multiple\nModernizr.input.pattern\nModernizr.input.placeholder\nModernizr.input.required\nModernizr.input.step\n```\n*/\n\n  // Run through HTML5's new input attributes to see if the UA understands any.\n  // Mike Taylr has created a comprehensive resource for testing these attributes\n  //   when applied to all input types:\n  //   miketaylr.com/code/input-type-attr.html\n\n  // Only input placeholder is tested while textarea's placeholder is not.\n  // Currently Safari 4 and Opera 11 have support only for the input placeholder\n  // Both tests are available in feature-detects/forms-placeholder.js\n  Modernizr['input'] = (function( props ) {\n    for ( var i = 0, len = props.length; i < len; i++ ) {\n      attrs[ props[i] ] = !!(props[i] in inputElem);\n    }\n    if (attrs.list){\n      // safari false positive's on datalist: webk.it/74252\n      // see also github.com/Modernizr/Modernizr/issues/146\n      attrs.list = !!(createElement('datalist') && window.HTMLDataListElement);\n    }\n    return attrs;\n  })(inputattrs);\n\n\n  // isEventSupported determines if the given element supports the given event\n  // kangax.github.com/iseventsupported/\n  // github.com/Modernizr/Modernizr/pull/636\n  //\n  // Known incorrects:\n  //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n  //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n  var isEventSupported = (function (undefined) {\n\n    // Detect whether event support can be detected via `in`. Test on a DOM element\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection\n    var needsFallback = !('onblur' in document.documentElement);\n\n    /**\n     * @param  {string|*}           eventName  is the name of an event to test for (e.g. \"resize\")\n     * @param  {(Object|string|*)=} element    is the element|document|window|tagName to test on\n     * @return {boolean}\n     */\n    function isEventSupportedInner( eventName, element ) {\n\n      var isSupported;\n      if ( !eventName ) { return false; }\n      if ( !element || typeof element === 'string' ) {\n        element = createElement(element || 'div');\n      }\n\n      // Testing via the `in` operator is sufficient for modern browsers and IE.\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and\n      // \"resize\", whereas `in` \"catches\" those.\n      eventName = 'on' + eventName;\n      isSupported = eventName in element;\n\n      // Fallback technique for old Firefox - bit.ly/event-detection\n      if ( !isSupported && needsFallback ) {\n        if ( !element.setAttribute ) {\n          // Switch to generic element if it lacks `setAttribute`.\n          // It could be the `document`, `window`, or something else.\n          element = createElement('div');\n        }\n\n        element.setAttribute(eventName, '');\n        isSupported = typeof element[eventName] === 'function';\n\n        if ( element[eventName] !== undefined ) {\n          // If property was created, \"remove it\" by setting value to `undefined`.\n          element[eventName] = undefined;\n        }\n        element.removeAttribute(eventName);\n      }\n\n      return isSupported;\n    }\n    return isEventSupportedInner;\n  })();\n\n  \n\n  // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n  // Modernizr.hasEvent('gesturestart', elem)\n  var hasEvent = ModernizrProto.hasEvent = isEventSupported;\n  \n/*!\n{\n  \"name\": \"input[search] search event\",\n  \"property\": \"search\",\n  \"tags\": [\"input\",\"search\"],\n  \"authors\": [\"Calvin Webster\"],\n  \"notes\": [{\n    \"name\": \"Wufoo demo\",\n    \"href\": \"http://www.wufoo.com/html5/types/5-search.html?\"\n  }, {\n    \"name\": \"CSS Tricks\",\n    \"href\": \"http://css-tricks.com/webkit-html5-search-inputs/\"\n  }]\n}\n!*/\n/* DOC\nThere is a custom `search` event implemented in webkit browsers when using an `input[search]` element.\n*/\n\n  Modernizr.addTest('inputsearchevent',  hasEvent('search'));\n\n\n  var inputtypes = 'search tel url email datetime date month week time datetime-local number range color'.split(' ');\n  \n\n  var inputs = {};\n  \n\n  var smile = ':)';\n  \n/*!\n{\n  \"name\": \"Form input types\",\n  \"property\": \"inputtypes\",\n  \"caniuse\": \"forms\",\n  \"tags\": [\"forms\"],\n  \"authors\": [\"Mike Taylor\"],\n  \"polyfills\": [\n    \"jquerytools\",\n    \"webshims\",\n    \"h5f\",\n    \"webforms2\",\n    \"nwxforms\",\n    \"fdslider\",\n    \"html5slider\",\n    \"galleryhtml5forms\",\n    \"jscolor\",\n    \"html5formshim\",\n    \"selectedoptionsjs\",\n    \"formvalidationjs\"\n  ]\n}\n!*/\n/* DOC\nDetects support for HTML5 form input types and exposes Boolean subproperties with the results:\n\n```javascript\nModernizr.inputtypes.color\nModernizr.inputtypes.date\nModernizr.inputtypes.datetime\nModernizr.inputtypes['datetime-local']\nModernizr.inputtypes.email\nModernizr.inputtypes.month\nModernizr.inputtypes.number\nModernizr.inputtypes.range\nModernizr.inputtypes.search\nModernizr.inputtypes.tel\nModernizr.inputtypes.time\nModernizr.inputtypes.url\nModernizr.inputtypes.week\n```\n*/\n\n  // Run through HTML5's new input types to see if the UA understands any.\n  //   This is put behind the tests runloop because it doesn't return a\n  //   true/false like all the other tests; instead, it returns an object\n  //   containing each input type with its corresponding true/false value\n\n  // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n  Modernizr['inputtypes'] = (function(props) {\n    var bool;\n    var inputElemType;\n    var defaultView;\n    var len = props.length;\n\n    for ( var i = 0; i < len; i++ ) {\n\n      inputElem.setAttribute('type', inputElemType = props[i]);\n      bool = inputElem.type !== 'text' && 'style' in inputElem;\n\n      // We first check to see if the type we give it sticks..\n      // If the type does, we feed it a textual value, which shouldn't be valid.\n      // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n      if ( bool ) {\n\n        inputElem.value         = smile;\n        inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n        if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n          docElement.appendChild(inputElem);\n          defaultView = document.defaultView;\n\n          // Safari 2-4 allows the smiley as a value, despite making a slider\n          bool =  defaultView.getComputedStyle &&\n            defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n            // Mobile android web browser has false positive, so must\n            // check the height to see if the widget is actually there.\n            (inputElem.offsetHeight !== 0);\n\n          docElement.removeChild(inputElem);\n\n        } else if ( /^(search|tel)$/.test(inputElemType) ){\n          // Spec doesn't define any special parsing or detectable UI\n          //   behaviors so we pass these through as true\n\n          // Interestingly, opera fails the earlier test, so it doesn't\n          //  even make it here.\n\n        } else if ( /^(url|email|number)$/.test(inputElemType) ) {\n          // Real url and email support comes with prebaked validation.\n          bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n        } else {\n          // If the upgraded input compontent rejects the :) text, we got a winner\n          bool = inputElem.value != smile;\n        }\n      }\n\n      inputs[ props[i] ] = !!bool;\n    }\n    return inputs;\n  })(inputtypes);\n\n/*!\n{\n  \"name\": \"JSON\",\n  \"property\": \"json\",\n  \"caniuse\": \"json\",\n  \"notes\": [{\n    \"name\": \"MDN documentation\",\n    \"href\": \"http://developer.mozilla.org/en/JSON\"\n  }],\n  \"polyfills\": [\"json2\"]\n}\n!*/\n/* DOC\nDetects native support for JSON handling functions.\n*/\n\n  // this will also succeed if you've loaded the JSON2.js polyfill ahead of time\n  //   ... but that should be obvious. :)\n\n  Modernizr.addTest('json', 'JSON' in window && 'parse' in JSON && 'stringify' in JSON);\n\n/*!\n{\n  \"name\": \"Notification\",\n  \"property\": \"notification\",\n  \"caniuse\": \"notifications\",\n  \"authors\": [\"Theodoor van Donge\", \"Hendrik Beskow\"],\n  \"notes\": [{\n    \"name\": \"HTML5 Rocks tutorial\",\n    \"href\": \"http://www.html5rocks.com/en/tutorials/notifications/quick/\"\n  },{\n    \"name\": \"W3C spec\",\n    \"href\": \"www.w3.org/TR/notifications/\"\n  }],\n  \"polyfills\": [\"desktop-notify\", \"html5-notifications\"]\n}\n!*/\n/* DOC\nDetects support for the Notifications API\n*/\n\n  Modernizr.addTest('notification', 'Notification' in window && 'permission' in window.Notification && 'requestPermission' in window.Notification);\n\n/*!\n{\n  \"name\": \"SVG\",\n  \"property\": \"svg\",\n  \"caniuse\": \"svg\",\n  \"tags\": [\"svg\"],\n  \"authors\": [\"Erik Dahlstrom\"],\n  \"polyfills\": [\n    \"svgweb\",\n    \"raphael\",\n    \"amplesdk\",\n    \"canvg\",\n    \"svg-boilerplate\",\n    \"sie\",\n    \"dojogfx\",\n    \"fabricjs\"\n  ]\n}\n!*/\n/* DOC\nDetects support for SVG in `<embed>` or `<object>` elements.\n*/\n\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  \n/*!\n{\n  \"name\": \"Unicode characters\",\n  \"property\": \"unicode\",\n  \"tags\": [\"encoding\"],\n  \"warnings\": [\n    \"positive Unicode support doesn't mean you can use it inside <title>, this seems more related to OS & Language packs\"\n  ]\n}\n!*/\n/* DOC\nDetects if unicode characters are supported in the current document.\n*/\n\n  /**\n   * Unicode special character support\n   *\n   * Detection is made by testing missing glyph box rendering against star character\n   * If widths are the same, this \"probably\" means the browser didn't support the star character and rendered a glyph box instead\n   * Just need to ensure the font characters have different widths\n   */\n  Modernizr.addTest('unicode', function() {\n    var bool;\n    var missingGlyph = createElement('span');\n    var star = createElement('span');\n\n    testStyles('#modernizr{font-family:Arial,sans;font-size:300em;}', function( node ) {\n\n      missingGlyph.innerHTML = isSVG ? '\\u5987' : '&#5987';\n      star.innerHTML = isSVG ? '\\u2606' : '&#9734';\n\n      node.appendChild(missingGlyph);\n      node.appendChild(star);\n\n      bool = 'offsetWidth' in missingGlyph && missingGlyph.offsetWidth !== star.offsetWidth;\n    });\n\n    return bool;\n\n  });\n\n/*!\n{\n  \"name\": \"HTML5 Video\",\n  \"property\": \"video\",\n  \"caniuse\": \"video\",\n  \"tags\": [\"html5\"],\n  \"knownBugs\": [\n    \"Without QuickTime, `Modernizr.video.h264` will be `undefined`; http://github.com/Modernizr/Modernizr/issues/546\"\n  ],\n  \"polyfills\": [\n    \"html5media\",\n    \"mediaelementjs\",\n    \"sublimevideo\",\n    \"videojs\",\n    \"leanbackplayer\",\n    \"videoforeverybody\"\n  ]\n}\n!*/\n/* DOC\nDetects support for the video element, as well as testing what types of content it supports.\n\nSubproperties are provided to describe support for `ogg`, `h264` and `webm` formats, e.g.:\n\n```javascript\nModernizr.video         // true\nModernizr.video.ogg     // 'probably'\n```\n*/\n\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n  //                     thx to NielsLeenheer and zcorpan\n\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n  Modernizr.addTest('video', function() {\n    /* jshint -W053 */\n    var elem = createElement('video');\n    var bool = false;\n\n    // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n    try {\n      if ( bool = !!elem.canPlayType ) {\n        bool = new Boolean(bool);\n        bool.ogg = elem.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/,'');\n\n        // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n        bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/,'');\n\n        bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n\n        bool.vp9 = elem.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/,'');\n\n        bool.hls = elem.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/,'');\n      }\n    } catch(e){}\n\n    return bool;\n  });\n\n/*!\n{\n  \"name\": \"CSS :checked pseudo-selector\",\n  \"caniuse\": \"css-sel3\",\n  \"property\": \"checked\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"Related Github Issue\",\n    \"href\": \"https://github.com/Modernizr/Modernizr/pull/879\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('checked', function(){\n    return testStyles('#modernizr {position:absolute} #modernizr input {margin-left:10px} #modernizr :checked {margin-left:20px;display:block}', function( elem ){\n      var cb = createElement('input');\n      cb.setAttribute('type', 'checkbox');\n      cb.setAttribute('checked', 'checked');\n      elem.appendChild(cb);\n      return cb.offsetLeft === 20;\n    });\n  });\n\n\n  // List of property values to set for css tests. See ticket #21\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : []);\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n  \n/*!\n{\n  \"name\": \"CSS Opacity\",\n  \"caniuse\": \"css-opacity\",\n  \"property\": \"opacity\",\n  \"tags\": [\"css\"]\n}\n!*/\n\n  // Browsers that actually have CSS Opacity implemented have done so\n  // according to spec, which means their return values are within the\n  // range of [0.0,1.0] - including the leading zero.\n\n  Modernizr.addTest('opacity', function() {\n    var style = createElement('a').style;\n    style.cssText = prefixes.join('opacity:.55;');\n\n    // The non-literal . in this regex is intentional:\n    // German Chrome returns this value as 0,55\n    // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n    return (/^0.55$/).test(style.opacity);\n  });\n\n\n  /**\n   * testAllProps determines whether a given CSS property, in some prefixed\n   * form, is supported by the browser. It can optionally be given a value; in\n   * which case testAllProps will only return true if the browser supports that\n   * value for the named property; this latter case will use native detection\n   * (via window.CSS.supports) if available. A boolean can be passed as a 3rd\n   * parameter to skip the value check when native detection isn't available,\n   * to improve performance when simply testing for support of a property.\n   *\n   * @param prop - String naming the property to test (either camelCase or\n   *               kebab-case)\n   * @param value - [optional] String of the value to test\n   * @param skipValueTest - [optional] Whether to skip testing that the value\n   *                        is supported when using non-native detection\n   *                        (default: false)\n   */\n  function testAllProps (prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n  \n/*!\n{\n  \"name\": \"CSS Shapes\",\n  \"property\": \"shapes\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"CSS Shapes W3C specification\",\n    \"href\": \"http://www.w3.org/TR/css-shapes\"\n  },{\n    \"name\": \"Examples from Adobe\",\n    \"href\": \"http://html.adobe.com/webplatform/layout/shapes\"\n  }, {\n    \"name\": \"Samples showcasing uses of Shapes\",\n    \"href\": \"http://codepen.io/collection/qFesk\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('shapes', testAllProps('shapeOutside', 'content-box', true));\n\n/*!\n{\n  \"name\": \"CSS :target pseudo-class\",\n  \"caniuse\": \"css-sel3\",\n  \"property\": \"target\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"MDN documentation\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/:target\"\n  }],\n  \"authors\": [\"@zachleat\"],\n  \"warnings\": [\"Opera Mini supports :target but doesn't update the hash for anchor links.\"]\n}\n!*/\n/* DOC\nDetects support for the ':target' CSS pseudo-class.\n*/\n\n  // querySelector\n  Modernizr.addTest('target', function() {\n    var doc = window.document;\n    if(!('querySelectorAll' in doc) ) {\n      return false;\n    }\n\n    try {\n      doc.querySelectorAll(':target');\n      return true;\n    } catch(e) {\n      return false;\n    }\n  });\n\n/*!\n{\n  \"name\": \"dataset API\",\n  \"caniuse\": \"dataset\",\n  \"property\": \"dataset\",\n  \"tags\": [\"dom\"],\n  \"builderAliases\": [\"dom_dataset\"],\n  \"authors\": [\"@phiggins42\"]\n}\n!*/\n\n  // dataset API for data-* attributes\n  Modernizr.addTest('dataset', function() {\n    var n = createElement('div');\n    n.setAttribute('data-a-b', 'c');\n    return !!(n.dataset && n.dataset.aB === 'c');\n  });\n\n/*!\n{\n  \"name\": \"details Element\",\n  \"caniuse\": \"details\",\n  \"property\": \"details\",\n  \"tags\": [\"elem\"],\n  \"builderAliases\": [\"elem_details\"],\n  \"authors\": [\"@mathias\"],\n  \"notes\": [{\n    \"name\": \"Mathias' Original\",\n    \"href\": \"http://mths.be/axh\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('details', function() {\n    var el = createElement('details');\n    var diff;\n\n    // return early if possible; thanks @aFarkas!\n    if (!('open' in el)) {\n      return false;\n    }\n\n    testStyles('#modernizr details{display:block}', function( node ) {\n      node.appendChild(el);\n      el.innerHTML = '<summary>a</summary>b';\n      diff = el.offsetHeight;\n      el.open = true;\n      diff = diff != el.offsetHeight;\n    });\n\n\n    return diff;\n  });\n\n/*!\n{\n  \"name\": \"Template Tag\",\n  \"property\": \"template\",\n  \"tags\": [\"elem\"],\n  \"notes\": [{\n    \"name\": \"HTML5Rocks Article\",\n    \"href\": \"http://www.html5rocks.com/en/tutorials/webcomponents/template/\"\n  },{\n    \"name\": \"W3 Spec\",\n    \"href\": \"https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('template', 'content' in createElement('template'));\n\n/*!\n{\n  \"name\": \"time Element\",\n  \"property\": \"time\",\n  \"tags\": [\"elem\"],\n  \"builderAliases\": [\"elem_time\"],\n  \"notes\": [{\n    \"name\": \"WhatWG Spec\",\n    \"href\": \"http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-time-element\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('time', 'valueAsDate' in createElement('time'));\n\n/*!\n{\n  \"name\": \"Track element and Timed Text Track\",\n  \"property\": [\"texttrackapi\", \"track\"],\n  \"tags\": [\"elem\"],\n  \"builderAliases\": [\"elem_track\"],\n  \"authors\": [\"Addy Osmani\"],\n  \"notes\": [{\n    \"name\": \"W3 track Element Spec\",\n    \"href\": \"http://www.w3.org/TR/html5/video.html#the-track-element\"\n  },{\n    \"name\": \"W3 track API Spec\",\n    \"href\": \"http://www.w3.org/TR/html5/media-elements.html#text-track-api\"\n  }],\n  \"warnings\": [\"While IE10 has implemented the track element, IE10 does not expose the underlying APIs to create timed text tracks by JS (really sad)\"]\n}\n!*/\n\n  Modernizr.addTest('texttrackapi', typeof (createElement('video').addTextTrack) === 'function');\n\n  // a more strict test for track including UI support: document.createElement('track').kind === 'subtitles'\n  Modernizr.addTest('track', 'kind' in createElement('track'));\n\n/*!\n{\n  \"name\": \"ES5 String.prototype.contains\",\n  \"property\": \"contains\",\n  \"authors\": [\"Robert Kowalski\"],\n  \"tags\": [\"es6\"]\n}\n!*/\n/* DOC\nCheck if browser implements ECMAScript 6 `String.prototype.contains` per specification.\n*/\n\n  Modernizr.addTest('contains', is(String.prototype.contains, 'function'));\n\n/*!\n{\n  \"name\": \"ES6 Promises\",\n  \"property\": \"promises\",\n  \"caniuse\": \"promises\",\n  \"polyfills\": [\"es6promises\"],\n  \"authors\": [\"Krister Kari\", \"Jake Archibald\"],\n  \"tags\": [\"es6\"],\n  \"notes\": [{\n    \"name\": \"The ES6 promises spec\",\n    \"href\": \"https://github.com/domenic/promises-unwrapping\"\n  },{\n    \"name\": \"Chromium dashboard - ES6 Promises\",\n    \"href\": \"http://www.chromestatus.com/features/5681726336532480\"\n  },{\n    \"name\": \"JavaScript Promises: There and back again - HTML5 Rocks\",\n    \"href\": \"http://www.html5rocks.com/en/tutorials/es6/promises/\"\n  }]\n}\n!*/\n/* DOC\nCheck if browser implements ECMAScript 6 Promises per specification.\n*/\n\n  Modernizr.addTest('promises', function() {\n    return 'Promise' in window &&\n    // Some of these methods are missing from\n    // Firefox/Chrome experimental implementations\n    'resolve' in window.Promise &&\n    'reject' in window.Promise &&\n    'all' in window.Promise &&\n    'race' in window.Promise &&\n    // Older version of the spec had a resolver object\n    // as the arg rather than a function\n    (function() {\n      var resolve;\n      new window.Promise(function(r) { resolve = r; });\n      return typeof resolve === 'function';\n    }());\n  });\n\n/*!\n{\n  \"name\": \"input[capture] Attribute\",\n  \"property\": \"capture\",\n  \"tags\": [\"video\", \"image\", \"audio\", \"media\", \"attribute\"],\n  \"notes\": [{\n    \"name\": \"W3C draft: HTML Media Capture\",\n    \"href\": \"http://www.w3.org/TR/html-media-capture/\"\n  }]\n}\n!*/\n/* DOC\nWhen used on an `<input>`, this attribute signifies that the resource it takes should be generated via device's camera, camcorder, sound recorder.\n*/\n\n  // testing for capture attribute in inputs\n  Modernizr.addTest('capture', ('capture' in createElement('input')));\n\n/*!\n{\n  \"name\": \"input[directory] Attribute\",\n  \"property\": \"directory\",\n  \"authors\": [\"silverwind\"],\n  \"tags\": [\"file\", \"input\", \"attribute\"]\n}\n!*/\n/* DOC\nWhen used on an `<input type=\"file\">`, the `directory` attribute instructs\nthe user agent to present a directory selection dialog instead of the usual\nfile selection dialog.\n*/\n\n  Modernizr.addTest('fileinputdirectory', function() {\n    var elem = createElement('input'), dir = 'directory';\n    elem.type = 'file';\n    if (dir in elem) {\n      return true;\n    } else {\n      for (var i = 0, len = domPrefixes.length; i < len; i++) {\n        if (domPrefixes[i] + dir in elem) {\n          return true;\n        }\n      }\n    }\n    return false;\n  });\n\n/*!\n{\n  \"name\": \"placeholder attribute\",\n  \"property\": \"placeholder\",\n  \"tags\": [\"forms\", \"attribute\"],\n  \"builderAliases\": [\"forms_placeholder\"]\n}\n!*/\n/* DOC\nTests for placeholder attribute in inputs and textareas\n*/\n\n  Modernizr.addTest('placeholder', ('placeholder' in createElement('input') && 'placeholder' in createElement('textarea')));\n\n/*!\n{\n  \"name\": \"Inline SVG\",\n  \"property\": \"inlinesvg\",\n  \"caniuse\": \"svg-html5\",\n  \"tags\": [\"svg\"],\n  \"notes\": [{\n    \"name\": \"Test page\",\n    \"href\": \"http://paulirish.com/demo/inline-svg\"\n  }],\n  \"polyfills\": [\"inline-svg-polyfill\"]\n}\n!*/\n/* DOC\nDetects support for inline SVG in HTML (not within XHTML).\n*/\n\n  Modernizr.addTest('inlinesvg', function() {\n    var div = createElement('div');\n    div.innerHTML = '<svg/>';\n    return (div.firstChild && div.firstChild.namespaceURI) == 'http://www.w3.org/2000/svg';\n  });\n\n\n  // Run each test\n  testRunner();\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);"],"sourceRoot":"/source/"}